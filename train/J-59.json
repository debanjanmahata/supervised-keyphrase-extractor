{"reader_keywords": ["cost sharing", "job scheduling", "shapley value", "monetary transfer", "fairness axiom", "queueing problem", "agent", "cooperative game theory approach", "unit waiting cost", "processing time", "allocation rule", "expected cost bound"], "reader_keywords_stem": ["cost share", "job schedul", "shaplei valu", "monetari transfer", "fair axiom", "queue problem", "agent", "cooper game theori approach", "unit wait cost", "process time", "alloc rule", "expect cost bound"], "introduction": "A set of jobs need to be served by a server .The server can process only one job at a time .Each job has a finite processing time and a per unit time waiting cost .Efficient ordering of this queue directs us to serve the jobs in increasing order of the ratio of per unit time waiting cost and processing time .To compensate for waiting by jobs , monetary transfers to jobs are allowed .How should the jobs share the cost equitably amongst themselves through transfers ?The problem of fair division of costs among agents in a queue has many practical applications .For example , computer programs are regularly scheduled on servers , data are scheduled to be transmitted over networks , jobs are scheduled in shop-floor on machines , and queues appear in manypublic services post offices , banks .Study of queueing problems has attracted economists for a long time 7 , 17 .Cost sharing is a fundamental problem in many settings on the Internet .Internet can be seen as a common resource shared by many users and the cost incured by using the resource needs to be shared in an equitable manner .The current surge in cost sharing literature from computer scientists validate this claim 8 , 11 , 12 , 6 , 24 .Internet has many settings in which our model of job scheduling appears and the agents waiting in a queue incur costs jobs scheduled on servers , queries answered from a database , data scheduled to be transmitted over a fixed bandwidth network etc. .We hope that our analysis will give new insights on cost sharing problems of this nature .Recently , there has been increased interest in cost sharing methods with submodular cost functions 11 , 12 , 6 , 24 .While many settings do have submodular cost functions for example , multi-cast transmission games 8 , while the cost function of our game is supermodular .Also , such literature typically does not assume budget-balance transfers adding up to zero , while it is an inherent feature of our model .A recent paper by Maniquet 15 is the closest to our model and is the motivation behind our work 1 .Maniquet 15 studies a model where he assumes all processing times are unity .For such a model , he characterizes the Shapley value rule using classical fairness axioms .Chun 1 interprets the worth of a coalition of jobs in a different manner for the same model and derives a `` reverse '' rule .Chun characterizes this rule using similar fairness axioms .Chun 2 also studies the envy properties of these rules .Moulin 22 , 21 studies the queueing problem from a strategic point view when per unit waiting costs are unity .Moulin introduces new concepts in the queueing settings such as splitting and merging of jobs , and ways to prevent them .Another stream of literature is on `` sequencing games '' , first introduced by Curiel et al. 4 .For a detailed survey , refer to Curiel et al. 3 .Curiel et al. 4 defined sequencing games similar to our model , but in which an initial ordering of jobs is given .Besides , their notion of worth of a coalition is very different from the notions studied in Maniquet 15 and Chun 1 these are the notions used in our work too .The particular notion of the worth of a coalition makes the sequencing game of Curiel et al. 4 convex , whereas our game is not convex and does not assume the presence of any initial order .In summary , the focus of this stream of 1The authors thank Fran \u00b8 cois Maniquet for several fruitful discussions .research is how to share the savings in costs from the initial ordering to the optimal ordering amongst jobs also see Hamers et al. 9 , Curiel et al. 5 .Recently , Klijn and S \u00b4 anchez 13 , 14 considered sequencing games without any initial ordering of jobs .They take two approaches to define the worth of coalitions .One of their approaches , called the tail game , is related to the reverse rule of Chun 1 .In the tail game , jobs in a coalition are served after the jobs not in the coalition are served .Klijn and S \u00b4 anchez 14 showed that the tail game is balanced .Further , they provide expressions for the Shapley value in tail game in terms of marginal vectors and reversed marginal vectors .We provide a simpler expression of the Shapley value in the tail game , generalizing the result in Chun 1 .Klijn and S \u00b4 anchez 13 study the core of this game in detail .Strategic aspects of queueing problems have also been researched .Mitra 19 studies the first best implementation in queueing models with generic cost functions .First best implementation means that there exists an efficient mechanism in which jobs in the queue have a dominant strategy to reveal their true types and their transfers add up to zero .Suijs 27 shows that if waiting costs of jobs are linear then first best implementation is possible .Mitra 19 shows that among a more general class of queueing problems first best implementation is possible if and only if the cost is linear .For another queueing model , Mitra 18 shows that first best implementation is possible if and only if the cost function satisfies a combinatorial property and an independence property .Moulin 22 , 21 studies strategic concepts such as splitting and merging in queueing problems with unit per unit waiting costs .The general cost sharing literature is vast and has a long history .For a good survey , we refer to 20 .From the seminal work of Shapley 25 to recent works on cost sharing in multi-cast transmission and optimization problems 8 , 6 , 23 this area has attracted economists , computer scientists , and operations researchers .Ours is the first model which considers cost sharing when both processing time and per unit waiting cost of jobs are present .We take a cooperative game theory approach and apply the classical Shapley value rule to the problem .We show that the Shapley value rule satisfies many intuitive fairness axioms .Due to two dimensional nature of our model and one dimensional nature of Maniquet 's model 15 , his axioms are insufficient to characterize the Shapley value in our setting .We introduce axioms such as independece of preceding jobs ' unit waiting cost and independence of following jobs ' processing time .A key axiom that we introduce gives us a bound on cost share of a job in a group of jobs which have the same ratio of unit time waiting cost and processing time these jobs can be ordered in any manner between themseleves in an efficient ordering .If such a group consists of just one job , then the axiom says that such a job should at least pay his own processing cost i.e. , the cost it would have incurred if it was the only job in the queue .If there are multiple jobs in such a group , the probability of any two jobs from such a group inflicting costs on each other is same 21 in an efficient ordering .Depending on the ordering selected , one job inflicts cost on the other .Our fairness axiom says that each job should at least bear such expected costs .We characterize the Shapley value rule using these fairness axioms .We also extend the envy results in 2 to our setting and discuss a class of reasonable cost sharing mechanisms .", "title": "Cost Sharing in a Job Scheduling Problem Using the Shapley Value", "author_keywords_stem": ["queue problem", "shapley value", "cost share", "job schedule"], "abstract": "A set of jobs need to be served by a single server which can serve only one job at a time .Jobs have processing times and incur waiting costs linear in their waiting time .The jobs share their costs through compensation using monetary transfers .We characterize the Shapley value rule for this model using fairness axioms .Our axioms include a bound on the cost share of jobs in a group , efficiency , and some independence properties on the the cost share of a job .", "id": "J-59", "combined_keywords_stem": ["cost share", "job schedul", "shaplei valu", "monetari transfer", "fair axiom", "queue problem", "agent", "cooper game theori approach", "unit wait cost", "process time", "alloc rule", "expect cost bound", "queue problem", "cost share", "job schedul"], "combined_keywords": ["cost sharing", "job scheduling", "shapley value", "monetary transfer", "fairness axiom", "queueing problem", "agent", "cooperative game theory approach", "unit waiting cost", "processing time", "allocation rule", "expected cost bound", "queue problem", "cost share", "job schedule"], "author_keywords": ["queue problem", "shapley value", "cost share", "job schedule"], "method": "There are n jobs that need to be served by one server which can process only one job at a time .The set of jobs are denoted as N = 1 , ... , n .a : N + N is an ordering of jobs in N and ai denotes the position of job i in the ordering a. Given an ordering a , define Fi a = j E N : ai < aj and Pi a = j E N : ai > aj .Every job i is identified by two parameters : pi , \u03b8i .pi is the processing time and \u03b8i is the cost per unit waiting time of job i. Thus , a queueing problem is defined by a list q = N , p , \u03b8 E Q , where Q is the set of all possible lists .We will denote ` yi = \u03b8i pi .Given an ordering of jobs a , the cost incurred by job i is given byThe total cost incurred by all jobs due to an ordering a can be written in two ways : i by summing the cost incurred by every job and ii by summing the costs inflicted by a job on other jobs with their own processing cost .An efficient ordering a * is the one which minimizes the total cost incurred by all jobs .So , C N , a * < C N , a ` d a E \u03a3 .To achieve notational simplicity , we will write the total cost in an efficient ordering of jobs from N as C N whenever it is not confusing .Sometimes , we will deal with only a subset of jobs S C N .The ordering a will then be defined on jobs in S only and we will write the total cost from an efficient ordering of jobs in S as C S .The following lemma shows that jobs are ordered in decreasing ' y in an efficient ordering .This is also known as the weighted shortest processing time rule , first introduced by Smith 26 .PROOF .Assume for contradiction that the statment of the lemma is not true .This means , we can find two consecutive jobs i , j E S a \u2217 i = aj * + 1 such that ` yi > ` yj .Define a new ordering a by interchanging i and j in a * .The costs to jobs in S \\ i , j is not changed from a * to a .The difference between total costs in a * and a is given by , C S , a \u2212 C S , a * = \u03b8jpi \u2212 \u03b8ipj .From efficiency we get \u03b8jpi \u2212 \u03b8ipj > 0 .This gives us ` yj > ` yi , which is a contradiction .An allocation for q = N , p , \u03b8 E Q has two components : an ordering a and a transfer ti for every job i E N. ti denotes the payment received by job i. Given a transfer ti and an ordering a , the cost share of job i is defined as ,LEMMA 2 .Let \u03c3 , t be an efficient allocation and \u03c0 be the vector of cost shares of jobs from this allocation .If \u03c3 * = 6 \u03c3 be an efficient ordering and t * i = ci \u03c3 * \u2212 \u03c0i ` d i E N , then \u03c3 * , t * is also an efficient allocation .PROOF .Since \u03c3 , t is efficient , iEN ti = 0 .This gives iEN \u03c0i = C N .Since \u03c3 * is an efficient ordering , iEN ci \u03c3 * = C N .This means , iEN t * i = iEN ci \u03c3 * \u2212 \u03c0i = 0 .So , \u03c3 * , t * is an efficient allocation .Depending on the transfers , the cost shares in different efficient allocations may differ .An allocation rule \u03c8 associates with every q E Q a non-empty subset \u03c8 q of allocations .An allocation \u03c3 , t is efficient for q = N , p , \u03b8 whenever \u03c3 is an efficient ordering and iEN ti = 0 .The set of efficient orderings of q is denoted as \u03a3 * q and \u03c3 * q will be used to refer to a typical element of the set .The following straightforward lemma says that for two different efficient orderings , the cost share in one efficient allocation is possible to achieve in the other by appropriately modifying the transfers .In this section , we define the coalitional cost of this game and analyze the solution proposed by the Shapley value .Given a queue q E Q , the cost of a coalition of S C N jobs in the queue is defined as the cost incurred by jobs in S if these are the only jobs served in the queue using an efficient ordering .Formally , the cost of a coalition S C N is ,where \u03c3 * = \u03c3 * S is an efficient ordering considering jobs from S only .The worth of a coalition of S jobs is just \u2212 C S .Maniquet 15 observes another equivalent way to define the worth of a coalition is using the dual function of the cost function C \u00b7 .Other interesting ways to define the worth of a coalition in such games is discussed by Chun 1 , who assume that a coalition of jobs are served after the jobs not in the coalition are served .The Shapley value or cost share of a job i is defined as ,The Shapley value allocation rule says that jobs are ordered using an efficient ordering and transfers are assigned to jobs such that the cost share of job i is given by Equation 1 .where Li = \u03b8i jEPi \u03c3 * pj and Ri = pi jEFi \u03c3 * \u03b8j .PROOF .Another way to write the Shapley value formula is the following 10 ,where \u0394 S = C S if | S | = 1 and \u0394 S = C S \u2212 T ; S \u0394 T .This gives \u0394 i = C i = pi\u03b8i ` di E N. For any i , j E N with i = 6 j , we have \u0394 i , j = C i , j \u2212 C i \u2212 C jWe will show by induction that \u0394 S = 0 if | S | > 2 .For | S | = 3 , let S = i , j , k .Without loss of generality , assumeNow , assume for T C S , \u0394 T = 0 if | T | > 2 .Without loss of generality assume that \u03c3 to be the identity mapping .Now ,This proves that \u0394 S = 0 if | S | > 2 .Using the Shapley value formula now ,In this section , we will define serveral axioms on fairness and characterize the Shapley value using them .For a given q E Q , we will denote \u03c8 q as the set of allocations from allocation rule \u03c8 .Also , we will denote the cost share vector associated with an allocation rule \u03c3 , t as \u03c0 and that with allocation rule \u03c3 ' , t ' as \u03c0 ' etc. .We will define three types of fairness axioms : i related to efficiency , ii related to equity , and iii related to independence .We define two types of efficiency axioms .One related to efficiency which states that an efficient ordering should be selected and the transfers of jobs should add up to zero budget balance .Definition 1 .An allocation rule \u03c8 satisfies efficiency if for every q E Q and \u03c3 , t E \u03c8 q , \u03c3 , t is an efficient allocation .The second axiom related to efficiency says that the allocation rule should not discriminate between two allocations which are equivalent to each other in terms of cost shares of jobs .Definition 2 .An allocation rule \u03c8 satisfies Pareto indifference if for every q E Q , \u03c3 , t E \u03c8 q , and \u03c3 ' , t ' E \u03a3 q , we have \u03c0i = \u03c0 ' i ` d i E N \u21d2 \u03c3 ' , t ' E \u03c8 q .An implication of Pareto indifference axiom and Lemma 2 is that for every efficient ordering there is some set of transfers of jobs such that it is part of an efficient rule and the cost share of a job in all these allocations are same .How should the cost be shared between two jobs if the jobs have some kind of similarity between them ?Equity axioms provide us with fairness properties which help us answer this question .We provide five such axioms .Some of these axioms for example anonymity , equal treatment of equals are standard in the literature , while some are new .We start with a well known equity axiom called anonymity .Denote \u03c1 : N + N as a permutation of elements in N. Let \u03c1 \u03c3 , t denote the allocation obtained by permuting elements in \u03c3 and t according to \u03c1 .Similarly , let \u03c1 p , \u03b8 denote the new list of p , \u03b8 obtained by permuting elements of p and \u03b8 according to \u03c1 .Our first equity axiom states that allocation rules should be immune to such permutation of data .Definition 3 .An allocation rule \u03c8 satisfies anonymity if for all q E Q , \u03c3 , t E \u03c8 q and every permutation \u03c1 , we then \u03c1 \u03c3 , t E \u03c8 N , \u03c1 q .The next equity axiom is classical in literature and says that two similar jobs should be compensated such that their cost shares are equal .This implies that if all the jobs are of same type , then jobs should equally share the total system cost .Definition 4 .An allocation rule \u03c8 satisfies equal treatment of equals ETE if for all q E Q , \u03c3 , t E \u03c8 q , i , j E N , thenETE directs us to share costs equally between jobs if they are of the same per unit waiting cost and processing time .But it is silent about the cost shares of two jobs i and j which satisfy pi \u03b8i = \u03b8j pj .We introduce a new axiom for this .If an efficient rule chooses \u03c3 such that \u03c3i < \u03c3j for some i , j E N , then job i is inflicting a cost of pi\u03b8j on job j and job j is inflicting zero cost on job i. Define for some \u03b3 > 0 , S \u03b3 = i E N : \u03b3i = \u03b3 .In an efficient rule , the elements in S \u03b3 can be ordered in any manner in | S \u03b3 | !ways .If i , j E S \u03b3 then we have pj\u03b8i = pi\u03b8j .Probability of \u03c3i < \u03c3j is 21 and so is the probability of \u03c3i > \u03c3j .The expected cost i inflicts on j is 21 pi\u03b8j and j inflicts on i is 2 pj\u03b8i .Our next fairness axiom says that i and j shouldeach be responsible for their own processing cost and this expected cost they inflict on each other .Arguing for every pair of jobs i , j E S \u03b3 , we establish a bound on the cost share of jobs in S \u03b3 .We impose this as an equity axiom below .Definition 5 .An allocation rule satisfies expected cost bound ECB if for all q E Q , \u03c3 , t E \u03c8 q with \u03c0 being the resulting cost share , for any \u03b3 > 0 , and for every i E S \u03b3 , we haveThe central idea behind this axiom is that of `` expected cost inflicted '' .If an allocation rule chooses multiple allocations , we can assign equal probabilities of selecting one of the allocations .In that case , the expected cost inflicted by a job i on another job j in the allocation rule can be calculated .Our axiom says that the cost share of a job should be at least its own processing cost and the total expected cost it inflicts on others .Note that the above bound poses no constraints on how the costs are shared among different groups .Also observe that if S \u03b3 contains just one job , ECB says that job should at least bear its own processing cost .A direct consequence of ECB is the following lemma .LEMMA 4 .Let \u03c8 be an efficient rule which satisfies ECB .For a q E Q if S \u03b3 = N , then for any \u03c3 , t E \u03c8 q which gives a cost share of \u03c0 , \u03c0i = pi\u03b8i + 21 Li + Ri ` d i E N. PROOF .From ECB , we get \u03c0i > pi\u03b8i +21 Li + Ri ` d i E N. Assume for contradiction that there exists j E N such that \u03c0j > pj \u03b8j + 21 Li + Ri .Using efficiency and the fact that iEN Li = iEN Ri , we get iEN \u03c0i = C N > iEN pi\u03b8i + 21 iEN Li + Ri = C N .This gives us a contradiction .Next , we introduce an axiom about sharing the transfer of a job between a set of jobs .In particular , if the last job quits the system , then the ordering need not change .But the transfer to the last job needs to be shared between the other jobs .This should be done in proportion to their processing times because every job influenced the last job based on its processing time .Definition 6 .An allocation rule \u03c8 satisfies proportionate responsibility of p PRp if for all q E Q , for all \u03c3 , t E \u03c8 q , k E N such that \u03c3k = | N | , q ' = N \\ k , p ' , \u03b8 ' E Q , such that for all i E N \\ k : \u03b8 ' i = \u03b8i , p ' i = pi , there exists \u03c3 ' , t ' E \u03c8 q ' such that for all i E N \\ k : \u03c3 ' i = \u03c3i andAn analogous fairness axiom results if we remove the job from the beginning of the queue .Since the presence of the first job influenced each job depending on their \u03b8 values , its transfer needs to be shared in proportion to \u03b8 values .Definition 7 .An allocation rule \u03c8 satisfies proportionate responsibility of \u03b8 PR\u03b8 if for all q E Q , for all \u03c3 , t E \u03c8 q , k E N such that \u03c3k = 1 , q ' = N \\ k , p ' , \u03b8 ' E Q , such that for all i E N \\ k : \u03b8 ' i = \u03b8i , p ' i = pi , there exists \u03c3 ' , t ' E \u03c8 q ' such that for all i E N \\ k : \u03c3 ' i = \u03c3i andThe proportionate responsibility axioms are generalizations of equal responsibility axioms introduced by Maniquet 15 .The waiting cost of a job does not depend on the per unit waiting cost of its preceding jobs .Similarly , the waiting cost inflicted by a job to its following jobs is independent of the processing times of the following jobs .These independence properties should be carried over to the cost sharing rules .This gives us two independence axioms .Definition 8 .An allocation rule \u03c8 satisfies independence of preceding jobs ' \u03b8 IPJ\u03b8 if for all q = N , p , \u03b8 , q ' = N , p ' , \u03b8 ' E Q , \u03c3 , t E \u03c8 q , \u03c3 ' , t ' E \u03c8 q ' , if for all i E N \\ k : \u03b8i = \u03b8 ' i , pi = p ' i and \u03b3k < \u03b3 ` k , pk = p ` k , then for all j E N such that \u03c3j > \u03c3k : \u03c0j = \u03c0 ` j , where \u03c0 is the cost share in \u03c3 , t and \u03c0 ' is the cost share in \u03c3 ' , t ' .Definition 9 .An allocation rule \u03c8 satisfies independence of following jobs ' p IFJp if for all q = N , p , \u03b8 , q ' = N , p ' , \u03b8 ' E Q , \u03c3 , t E \u03c8 q , \u03c3 ' , t ' E \u03c8 q ' , if for all i E N \\ k : \u03b8i = \u03b8 ' i , pi = p ' i and \u03b3k > \u03b3 ` k , \u03b8k = \u03b8 ` k , then for all j E N such that \u03c3j < \u03c3k : \u03c0j = \u03c0 ` j , where \u03c0 is the cost share in \u03c3 , t and \u03c0 ' is the cost share in \u03c3 ' , t ' .Having stated the fairness axioms , we propose three different ways to characterize the Shapley value rule using these axioms .All our characterizations involve efficiency and ECB .But if we have IPJ\u03b8 , we either need IFJp or PRp .Similarly if we have IFJp , we either need IPJ\u03b8 or PR\u03b8 .PROOF .Define for any i , j E N , \u03b8ij = \u03b3ipj and pij = \u03b8j .Assume without loss of generality that \u03c3 is an efficient \u03b3i ordering with \u03c3i = i ` d i E N. Consider the following q ' = N , p ' , \u03b8 ' corresponding to job i with pj ' = pj if j < i and p ' j = pij if j > i , \u03b8 ' j = \u03b8ij if j < i and \u03b8 ' j = \u03b8j if j > i. Observe that all jobs have the same \u03b3 : \u03b3i .By Lemma 2 and efficiency , \u03c3 , t ' E \u03c8 q ' for some set of transfers t ' .Using Lemma 4 , we get cost share of i from \u03c3 , t ' as \u03c0i = pi\u03b8i + 21 Li + Ri .Now , for any j < i , if we change \u03b8 ' j to \u03b8j without changing processing time , the new \u03b3 of j is \u03b3j > \u03b3i .Applying IPJ\u03b8 , the cost share of job i should not change .Similarly , for any job j > i , if we change p ' j to pj without changing \u03b8j , the new \u03b3 of j is \u03b3j < \u03b3i .Applying IFJp , the cost share of job i should not change .Applying this procedure for every j < i with IPJ\u03b8 and for every j > i with IFJp , we reach q = N , p , \u03b8 and the payoff of i does not change from \u03c0i .Using this argument for every i E N and using the expression for the Shapley value in Lemma 3 , we get the Shapley value rule .It is possible to replace one of the independence axioms with an equity axiom on sharing the transfer of a job .This is shown in Propositions 2 and 3 .PROOF .As in the proof of Proposition 1 , define \u03b8ij = \u03b3ipj ` d i , j E N. Assume without loss of generality that \u03c3 is an efficient ordering with \u03c3i = i ` d i E N. Consider a queue with jobs in set K = 1 , ... , i , i + 1 , where i < n. Define q ' = K , p , \u03b8 ' , where \u03b8 ' j = \u03b8i +1ordering in q '' and by IPJ\u03b8 the cost share of i + 1 remains \u03c0i +1 .In q '' ' = K \\ i + 1 , p , \u03b8 '' , we can calculate the cost share of job i using ECB and Lemma 4 as \u03c0i = pi\u03b8i + 2 j < i pj\u03b8i .So , using PRp we get the new cost share of jobNow , we can set K = K U i + 2 .As before , we can find cost share of i + 2 in this queue as \u03c0i +2 = pi +2 \u03b8i +2 +of job i in the new queue as \u03c0i = pi\u03b8i + 21 j < ipj\u03b8i + pi\u03b8i +1 + pi\u03b8i +2 .This process can be repeated till we add job n at which point cost share of i is pi\u03b8i + 21 j < i pj\u03b8i + j > i pi\u03b8j .Then , we can adjust the \u03b8 of preceding jobs of i to their original value and applying IPJ\u03b8 , the payoffs of jobs i through n will not change .This gives us the Shapley values of jobs i through n. Setting i = 1 , we get cost shares of all the jobs from \u03c8 as the Shapley value .PROOF .The proof mirrors the proof of Proposition 2 .We provide a short sketch .Analogous to the proof of Proposition 2 , \u03b8s are kept equal to original data and processing times are initialized to pi +1 j .This allows us to use IFJp .Also , contrast to Proposition 2 , we consider K = i , i + 1 , ... , n and repeatedly add jobs to the beginning of the queue maintaining the same efficient ordering .So , we add the cost components of preceding jobs to the cost share of jobs in each iteration and converge to the Shapley value rule .The next proposition shows that the Shapley value rule satisfies all the fairness axioms discussed .PROOF .The Shapley value rule chooses an efficient ordering and by definition the payments add upto zero .So , it satisfies efficiency .The Shapley value assigns same cost share to a job irrespective of the efficient ordering chosen .So , it is pareto indifferent .The Shapley value is anonymous because the particular index of a job does not effect his ordering or cost share .For ETE , consider two jobs i , j E N such that pi = pj and \u03b8i = \u03b8j .Without loss of generality assume the efficient ordering to be 1 , ... , i , ... , j , ... , n. Now , the Shapley value of job i is = pi\u03b8i + 21 j < ipj\u03b8i +In this section , we will define a reasonable class of cost sharing mechanisms .We will show how these reasonable mechanisms lead to the Shapley value mechanism .3 .Consider any job i , in an efficient ordering \u03c3 , if we increase the value of \u03b3j for some j = 6 i such that \u03c3j > \u03c3i , then the set Pi preceding jobs does not change in the new efficient ordering .If \u03b3j is changed such that pj remains the same , then the expression jEPi \u03b8ipj is unchanged .If p , \u03b8 values of no other jobs are changed , then the Shapley value is unchanged by increasing \u03b3j for some j E Pi while keeping pj unchanged .Thus , the Shapley value rule satisfies IPJ\u03b8 .An analogous argument shows that the Shapley value rule satisfies IFJp .For PRp , assume without loss of generality that jobs are ordered 1 , ... , n in an efficient ordering .Denote the transfer of job i = 6 n due to the Shapley value with set of jobs N and set of jobs N \\ n as ti and t0i respectively .Transfer of last job is tn = 21\u03b8n j < npj .Now ,A similar argument shows that the Shapley value rule satisfies PR\u03b8 .PROOF .The proof follows from Propositions 1 , 2 , 3 , and 4 .where 0 < \u03b1 < 1 .The reasonable cost sharing mechanism says that every job should be paid a constant fraction of the difference between the waiting cost he incurs and the waiting cost he inflicts on other jobs .If \u03b1 = 0 , then every job bears its own cost .If \u03b1 = 1 , then every job gets compensated for its waiting cost but compensates others for the cost he inflicts on others .The Shapley value rule comes as a result of ETE as shown in the following proposition .PROOF .Consider a q E Q in which pi = pj and \u03b8i = \u03b8j .Let \u03c3 , t E \u03c8 q and \u03c0 be the resulting cost shares .From ETE , we get ,Using pi = pj , \u03b8i = \u03b8j te 1 \u03b1 = \u03b1te \u03b1 = 21 .This gives us the Shapley value rule by Lemma 3 .Chun 2 discusses a fariness condition called no-envy for the case when processing times of all jobs are unity .Definition 11 .An allocation rule satisfies no-envy if for all q E Q , \u03c3 , t E \u03c8 q , and i , j E N , we have \u03c0i < ci \u03c3ij tj , where \u03c0 is the cost share from allocation rule \u03c3 , t and \u03c3ij is the ordering obtaining by swapping i and j. From the result in 2 , the Shapley value rule does not satisfy no-envy in our model also .To overcome this , Chun 2 introduces the notion of adjusted no-envy , which he shows is satisfied in the Shapley value rule when processing times of all jobs are unity .Here , we show that adjusted envy continues to hold in the Shapley value rule in our model when processing times need not be unity .As before denote \u03c3ij be an ordering where the position of i and j is swapped from an ordering \u03c3 .For adjusted noenvy , if \u03c3 , t is an allocation for some q E Q , let tij be thetransfer of job i when the transfer of i is calculated with respect to ordering \u03c3ij .Observe that an allocation may not allow for calculation of tij .For example , if \u03c8 is efficient , then tij can not be calculated if \u03c3ij is also not efficient .For simplicity , we state the definition of adjusted no-envy to apply to all such rules .Definition 12 .An allocation rule satisfies adjusted noenvy if for all q E Q , \u03c3 , t E \u03c8 q , and i , j E N , we havePROPOSITION 6 .The Shapley value rule satisfies adjusted no-envy .PROOF .Without loss of generality , assume efficient ordering of jobs is : 1 , ... , n. Consider two jobs i and i + k. From Lemma 3 ,", "conclusions": "We studied the problem of sharing costs for a job scheduling problem on a single server , when jobs have processing times and unit time waiting costs .We took a cooperative game theory approach and show that the famous the Shapley value rule satisfies many nice fairness properties .We characterized the Shapley value rule using different intuitive fairness axioms .In future , we plan to further simplify some of the fairness axioms .Some initial simplifications already appear in 16 , where we provide an alternative axiom to ECB and also discuss the implication of transfers between jobs in stead of transfers from jobs to a central server .We also plan to look at cost sharing mechanisms other than the Shapley value .Investigating the strategic power of jobs in such mechanisms is another line of future research ."}