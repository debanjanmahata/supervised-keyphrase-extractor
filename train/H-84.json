{"reader_keywords": ["event threading", "automatic technique", "flat hierarchy", "dependency", "novel feature", "temporal locality", "event recognition", "time-ordering", "news organization", "topic detection", "cluster of topic", "topic cluster", "inter-related event", "seminal event", "event model", "quick overview", "hidden markov model", "flatcluster", "atomicity", "topic detection", "microscopic event", "mapping function", "directed edge", "time ordering", "agglomerative clustering", "cosine similarity", "term vector", "simple thresholding", "maximum spanning tree", "correct granularity", "dependency precision", "dependency recall", "dependency f-measure", "temporallocalization", "timedecay"], "reader_keywords_stem": ["event thread", "automat techniqu", "flat hierarchi", "depend", "novel featur", "tempor local", "event recognit", "time-order", "new organ", "topic detect", "cluster of topic", "topic cluster", "inter-relat event", "semin event", "event model", "quick overview", "hidden markov model", "flatclust", "atom", "topic detect", "microscop event", "map function", "direct edg", "time order", "agglom cluster", "cosin similar", "term vector", "simpl threshold", "maximum span tree", "correct granular", "depend precis", "depend recal", "depend f-measur", "temporalloc", "timedecai"], "introduction": "News forms a major portion of information disseminated in the world everyday .Common people and news analysts alike are very interested in keeping abreast of new things that happen in the news , but it is becoming very difficult to cope with the huge volumesof information that arrives each day .Hence there is an increasing need for automatic techniques to organize news stories in a way that helps users interpret and analyze them quickly .This problem is addressed by a research program called Topic Detection and Tracking TDT 3 that runs an open annual competition on standardized tasks of news organization .One of the shortcomings of current TDT evaluation is its view of news topics as flat collection of stories .For example , the detection task of TDT is to arrange a collection of news stories into clusters of topics .However , a topic in news is more than a mere collection of stories : it is characterized by a definite structure of inter-related events .This is indeed recognized by TDT which defines a topic as ` a set ofnews stories that are strongly related by some seminal realworld event ' where an event is defined as ` something that happens at a specific time and location ' 3 .For example , when a bomb explodes in a building , that is the seminal event that triggers the topic .Other events in the topic may include the rescue attempts , the search for perpetrators , arrests and trials and so on .We see that there is a pattern of dependencies between pairs of events in the topic .In the above example , the event of rescue attempts is ` influenced ' by the event of bombing and so is the event of search for perpetrators .In this work we investigate methods for modeling the structure of a topic in terms of its events .By structure , we mean not only identifying the events that make up a topic , but also establishing dependencies generally causal among them .We call the process of recognizing events and identifying dependencies among them event threading , an analogy to email threading that shows connections between related email messages .We refer to the resulting interconnected structure of events as the event model of the topic .Although this paper focuses on threading events within an existing news topic , we expect that such event based dependency structure more accurately reflects the structure of news than strictly bounded topics do .From a user 's perspective , we believe that our view of a news topic as a set of interconnected events helps him/her get a quick overview of the topic and also allows him/her navigate through the topic faster .The rest of the paper is organized as follows .In section 2 , we discuss related work .In section 3 , we define the problem and use an example to illustrate threading of events within a news topic .In section 4 , we describe how we built the corpus for our problem .Section 5 presents our evaluation techniques while section 6 describes the techniques we use for modeling event structure .In section 7 we present our experiments and results .Section 8 concludes the paper with a few observations on our results and comments on future work .", "title": "Event Threading within News Topics", "author_keywords_stem": ["event", "dependency", "thread", "cluster"], "abstract": "With the overwhelming volume of online news available today , there is an increasing need for automatic techniques to analyze and present news to the user in a meaningful and efficient manner .Previous research focused only on organizing news stories by their topics into a flat hierarchy .We believe viewing a news topic as a flat collection of stories is too restrictive and inefficient for a user to understand the topic quickly .In this work , we attempt to capture the rich structure of events and their dependencies in a news topic through our event models .We call the process of recognizing events and their dependencies event threading .We believe our perspective of modeling the structure of a topic is more effective in capturing its semantics than a flat list of on-topic stories .We formally define the novel problem , suggest evaluation metrics and present a few techniques for solving the problem .Besides the standard word based features , our approaches take into account novel features such as temporal locality of stories for event recognition and time-ordering for capturing dependencies .Our experiments on a manually labeled data sets show that our models effectively identify the events and capture dependencies among them .", "id": "H-84", "combined_keywords_stem": ["event thread", "automat techniqu", "flat hierarchi", "depend", "novel featur", "tempor local", "event recognit", "time-order", "new organ", "topic detect", "cluster of topic", "topic cluster", "inter-relat event", "semin event", "event model", "quick overview", "hidden markov model", "flatclust", "atom", "topic detect", "microscop event", "map function", "direct edg", "time order", "agglom cluster", "cosin similar", "term vector", "simpl threshold", "maximum span tree", "correct granular", "depend precis", "depend recal", "depend f-measur", "temporalloc", "timedecai", "event", "thread", "cluster"], "evaluation": "A system can generate some event model M ' = S ' , E ' using certain algorithms , which is usually different from the truth model M = S , E we assume the annotator did not make any mistake .Comparing a system event model M ' with the true model M requires comparing the entire event models including their dependency structure .And different event granularities may bring huge discrepancy between M ' and M .This is certainly non-trivial as even testing whether two graphs are isomorphic has no known polynomial time solution .Hence instead of comparing the actual structure we examine a pair of stories at a time and verify if the system and true labels agree on their event-memberships and dependencies .Specifically , we compare two kinds of story pairs :where f is the function in M that maps stories to events as defined in equation 4 .Note the story pair is ordered here , so si , sj is not equivalent to sj , si .In our evaluation , a correct pair with wrongdirection will be considered a mistake .As we mentioned earlier in section 3 , ignoring the direction may make the problem simpler , but we will lose the expressiveness of our representation .Given these two sets of story pairs corresponding to the true event model M and the system event model M ' , we define recall and precision for each category as follows .where f ' is the story-event mapping function corresponding to the model M ' .selected stories si and sj are in the same system-event given that they are in the same true event .The measures are illustrated by an example in figure 2 .We also combine these measures using the well known F1-measure commonly used in text classification and other research areas as shown below .where CF and DF are the cluster and dependency F1-measures respectively and JF is the Joint F1-measure JF that we use to measure the overall performance .The task of event modeling can be split into two parts : clustering the stories into unique events in the topic and constructing dependencies among them .In the following subsections , we describe techniques we developed for each of these sub-tasks .Each topic is composed of multiple events , so stories must be clustered into events before we can model the dependencies among them .For simplicity , all stories in the same topic are assumed to be available at one time , rather than coming in a text stream .This task is similar to traditional clustering but features other than word distributions may also be critical in our application .In many text clustering systems , the similarity between two stories is the inner product of their tf-idf vectors , hence we use it as one of our features .Stories in the same event tend to follow temporal locality , so the time stamp of each story can be a useful feature .Additionally , named-entities such as person and location names are another obvious feature when forming events .Stories in the same event tend to be related to the same person s and locations s .In this subsection , we present an agglomerative clustering algorithm that combines all these features .In our experiments , however , we study the effect of each feature on the performance separately using modified versions of this algorithm .We initialize our events to singleton events clusters , i.e. , each cluster contains exactly one story .So the similarity between two events , to start with , is exactly the similarity between the corresponding stories .The similarity wsum s1 ; s2 between two stories s1 and s2 is given by the following formula :Here !1 , !2 , !3 are the weights on different features .In this work , we determined them empirically , but in the future , one can consider more sophisticated learning techniques to determine them .cos s1 ; s2 is the cosine similarity of the term vectors .Loc s1 ; s2 is 1 if there is some location that appears in both stories , otherwise it is 0 .Per s1 ; s2 is similarly defined for person name .We use time decay when calculating similarity of story pairs , i.e. , the larger time difference between two stories , the smaller their similarities .The time period of each topic differs a lot , from a few days to a few months .So we normalize the time difference using the whole duration of that topic .The time decay adjusted similaritywhere t1 and t2 are the time stamps for story 1 and 2 respectively .T is the time difference between the earliest and the latest story in the given topic .a is the time decay factor .In each iteration , we find the most similar event pair and merge them .We have three different ways to compute the similarity between two events Eu and Ev : ~ Average link : In this case the similarity is the average of the similarities of all pairs of stories between Eu and Ev as shown below :~ Complete link : The similarity between two events is given by the smallest of the pair-wise similarities .~ Single link : Here the similarity is given by the best similarity between all pairs of stories .This process continues until the maximum similarity falls below the threshold or the number of clusters is smaller than a given number .Capturing dependencies is an extremely hard problem because it may require a ` deeper understanding ' of the events in question .A human annotator decides on dependencies not just based on the information in the events but also based on his/her vast repertoire of domain-knowledge and general understanding of how things operate in the world .For example , in Figure 1 a human knows ` Trial and indictment of Osama ' is influenced by ` Evidence gathered by CIA ' because he/she understands the process of law in general .We believe a robust model should incorporate such domain knowledge in capturing dependencies , but in this work , as a first step , we will rely on surface-features such as time-ordering of news stories and word distributions to model them .Our experiments in later sections demonstrate that such features are indeed useful in capturing dependencies to a large extent .In this subsection , we describe the models we considered for capturing dependencies .In the rest of the discussion in this subsection , we assume that we are already given the mapping f ' : S !E and we focus only on modeling the edges E ' .First we define a couple of features that the following models will employ .First we define a 1-1 time-ordering function t : S !f1 , ~ ~ ~ , ng that sorts stories in ascending order by their time of publication .Now , the event-time-ordering function te is defined as follows .In other words , te time-orders events based on the time-ordering of their respective first stories .We will also use average cosine similarity between two events as a feature and it is defined as follows .In this model , we assume that there are dependencies between all pairs of events .The direction of dependency is determined by the time-ordering of the first stories in the respective events .Formally , the system edges are defined as follows .where te is the event-time-ordering function .In other words , the dependency edge is directed from event Eu to event Ev , if the first story in event Eu is earlier than the first story in event Ev .We point out that this is not to be confused with the complete-link algorithm in clustering .Although we use the same names , it will be clear from the context which one we refer to .This model is an extension of the complete link model with an additional constraint that there is a dependency between any two events Eu and Ev only if the average cosine similarity between event Eu and event Ev is greater than a threshold T. Formally ,In this model , we assume that each event can have at most one parent .We define the set of dependencies as follows .Thus , for each event Ev , the nearest parent model considers only the event preceding it as defined by te as a potential candidate .The candidate is assigned as the parent only if the average similarity exceeds a pre-defined threshold T.This model also assumes that each event can have at most one parent .An event Ev is assigned a parent Eu if and only if Eu is the most similar earlier event to Ev and the similarity exceeds a threshold T. Mathematically , this can be expressed as :In this model , we first build a maximum spanning tree MST using a greedy algorithm on the following fully connected weighted , undirected graph whose vertices are the events and whose edges ^ E are defined as follows :Let MST ^ E be the set of edges in the maximum spanning tree of E ' .Now our directed dependency edges E are defined as follows .Thus in this model , we assign dependencies between the most similar events in the topic .Our experiments consists of three parts .First we modeled only the event clustering part defining the mapping function f ' using clustering algorithms described in section 6.1 .Then we modeled only the dependencies by providing to the system the true clusters and running only the dependency algorithms of section 6.2 .Finally , we experimented with combinations of clustering and dependency algorithms to produce the complete event model .This way of experimentation allows us to compare the performance of our algorithms in isolation and in association with other components .The following subsections present the three parts of our experimentation .We have tried several variations of the ACDT algorithm to study the effects of various features on the clustering performance .All the parameters are learned by tuning on the training set .We also tested the algorithms on the test set with parameters fixed at their optimal values learned from training .We used agglomerative clustering based on only cosine similarity as our clustering baseline .The results on the training and test sets are in Table 2 and 3 respectively .We use the Cluster F1-measure CF averaged over all topics as our evaluation criterion .P-value marked with a * means that it is a statistically significant improvement over the baseline 95 % confidence level , one tailed T-test .The methods shown in table 2 and 3 are :culation halts when the maximal similarity is smaller than the threshold T .Our experiments demonstrate that single link and complete link similarities perform worse than average link , which is reasonable since average link is less sensitive to one or two story pairs .We had expected locations and person names to improve the result , but it is not the case .Analysis of topics shows that many on-topic stories share the same locations or persons irrespective of the event they belong to , so these features may be more useful in identifying topics rather than events .Time decay is successful because events are temporally localized , i.e. , stories discussing the same event tend to be adjacent to each other in terms of time .Also we noticed that providing the number of true events improves the performance since it guides the clustering algorithm to get correct granularity .However , for most applications , it is not available .We used it only as a `` cheat '' experiment for comparison with other algorithms .On the whole , time decay proved to the most powerful feature besides cosine similarity on both training and test sets .In this subsection , our goal is to model only dependencies .We use the true mapping function f and by implication the true events V .We build our dependency structure E ' using all the five models described in section 6.2 .We first train our models on the 26 training topics .Training involves learning the best threshold T for each of the models .We then test the performances of all the trained models on the 27 test topics .We evaluate our performanceusing the average values of Dependency Precision DP , Dependency Recall DR and Dependency F-measure DF .We consider the complete-link model to be our baseline since for each event , it trivially considers all earlier events to be parents .Table 4 lists the results on the training set .We see that while all the algorithms except MST outperform the baseline complete-link algorithm , the nearest Parent algorithm is statistically significant from the baseline in terms of its DF-value using a one-tailed paired T-test at 95 % confidence level .of the threshold T. * indicates the corresponding model is statistically significant compared to the baseline using a one-tailed , paired T-test at 95 % confidence level .In table 5 we present the comparison of the models on the test set .Here , we do not use any tuning but set the threshold to the corresponding optimal values learned from the training set .The results throw some surprises : The nearest parent model , which was significantly better than the baseline on training set , turns out to be worse than the baseline on the test set .However all the other models are better than the baseline including the best similarity which is statistically significant .Notice that all the models that perform better than the baseline in terms of DF , actually sacrifice their recall performance compared to the baseline , but improve on their precision substantially thereby improving their performance on the DF-measure .We notice that both simple-thresholding and best similarity are better than the baseline on both training and test sets although the improvement is not significant .On the whole , we observe that the surface-level features we used capture the dependencies to a reasonable level achieving a best value of 0.72 DF on the test set .Although there is a lot of room for improvement , we believe this is a good first step .Now that we have studied the clustering and dependency algorithms in isolation , we combine the best performing algorithms and build the entire event model .Since none of the dependency algorithms has been shown to be consistently and significantly better than the others , we use all of them in our experimentation .From the clustering techniques , we choose the best performing Cos + TD .As a baseline , we use a combination of the baselines in each components , i.e. , cos for clustering and complete-link for dependencies .Note that we need to retrain all the algorithms on the training set because our objective function to optimize is now JF , the joint F-measure .For each algorithm , we need to optimize both the clustering threshold and the dependency threshold .We did this empirically on the training set and the optimal values are listed in table 6 .The results on the training set , also presented in table 6 , indicate that cos + TD+S imple-Thresholding is significantly better than the baseline in terms of the joint F-value JF , using a one-tailed paired Ttest at 95 % confidence level .On the whole , we notice that while the clustering performance is comparable to the experiments in section 7.1 , the overall performance is undermined by the low dependency performance .Unlike our experiments in section 7.2 where we had provided the true clusters to the system , in this case , the system has to deal with deterioration in the cluster quality .Hence the performance of the dependency algorithms has suffered substantially thereby lowering the overall performance .The results on the test set present a very similar story as shown in table 7 .We also notice a fair amount of consistency in the performance of the combination algorithms .cos + TD+S imple-Thresholding outperforms the baseline significantly .The test set results also point to the fact that the clustering component remains a bottleneck in achieving an overall good performance .", "combined_keywords": ["event threading", "automatic technique", "flat hierarchy", "dependency", "novel feature", "temporal locality", "event recognition", "time-ordering", "news organization", "topic detection", "cluster of topic", "topic cluster", "inter-related event", "seminal event", "event model", "quick overview", "hidden markov model", "flatcluster", "atomicity", "topic detection", "microscopic event", "mapping function", "directed edge", "time ordering", "agglomerative clustering", "cosine similarity", "term vector", "simple thresholding", "maximum spanning tree", "correct granularity", "dependency precision", "dependency recall", "dependency f-measure", "temporallocalization", "timedecay", "event", "thread", "cluster"], "author_keywords": ["event", "dependency", "thread", "cluster"], "method": "In this work , we have adhered to the definition of event and topic as defined in TDT .We present some definitions in italics and our interpretations regular-faced below for clarity .We first define our problem and representation of our model formally and then illustrate with the help of an example .We are given a set of n news stories S = fs , , ~ ~ ~ , sng on a given topic T and their time of publication .We define a set of events E _While the first constraint says that each event is an element in the power set of S , the second constraint ensures that each story can belong to at most one event .The last constraint tells us that every story belongs to one of the events in E .In fact this allows us to define a mapping function f from stories to events as follows :Further , we also define a set of directed edges E _ f Ei , Ei g which denote dependencies between events .It is important to explain what we mean by this directional dependency : While the existence of an edge itself represents relatedness of two events , the direction could imply causality or temporal-ordering .By causal dependency we mean that the occurrence of event B is related to and is a consequence of the occurrence of event A. By temporal ordering , we mean that event B happened after event A and is related to A but is not necessarily a consequence of A. For example , consider the following two events : ` plane crash ' event A and ` subsequent investigations ' event B in a topic on a plane crash incident .Clearly , the investigations are a result of the crash .Hence an arrow from A to B falls under the category of causal dependency .Now consider the pair of events ` Pope arrives in Cuba ' event A and ` Pope meets Castro ' event B in a topic that discusses Pope 's visit to Cuba .Now events A and B are closely related through their association with the Pope and Cuba but event B is not necessarily a consequence of the occurrence of event A .An arrow in such scenario captures what we call time ordering .In this work , we do not make an attempt to distinguish between these two kinds of dependencies and our models treats them as identical .A simpler and hence less controversial choice would be to ignore direction in the dependencies altogether and consider only undirected edges .This choice definitely makes sense as a first step but we chose the former since we believe directional edges make more sense to the user as they provide a more illustrative flow-chart perspective to the topic .To make the idea of event threading more concrete , consider the example of TDT3 topic 30005 , titled ` Osama bin Laden 's Indictment ' in the 1998 news .This topic has 23 stories which form 5 events .An event model of this topic can be represented as in figure 1 .Each box in the figure indicates an event in the topic of Osama 's indictment .The occurrence of event 2 , namely ` Trial and Indictment of Osama ' is dependent on the event of ` evidence gathered by CIA ' , i.e. , event 1 .Similarly , event 2 influences the occurrences of events 3 , 4 and 5 , namely ` Threats from Militants ' , ` Reactionsfrom Muslim World ' and ` announcement of reward ' .Thus all the dependencies in the example are causal .Extending our notation further , we call an event A a parent of B and B the child of A , if A , B E E .We define an event model M = S , E to be a tuple of the set of events and set of dependencies .Event threading is strongly related to topic detection and tracking , but also different from it significantly .It goes beyond topics , and models the relationships between events .Thus , event threading can be considered as a further extension of topic detection and tracking and is more challenging due to at least the following difficulties .In the next few sections , we will describe our attempts to tackle these problems .We picked 28 topics from the TDT2 corpus and 25 topics from the TDT3 corpus .The criterion we used for selecting a topic is that it should contain at least 15 on-topic stories from CNN headline news .If the topic contained more than 30 CNN stories , we picked only the first 30 stories to keep the topic short enough for annotators .The reason for choosing only CNN as the source is that the stories from this source tend to be short and precise and do not tend to digress or drift too far away from the central theme .We believe modeling such stories would be a useful first step before dealing with more complex data sets .We hired an annotator to create truth data .Annotation includes defining the event membership for each story and also the dependencies .We supervised the annotator on a set of three topics that we did our own annotations on and then asked her to annotate the 28 topics from TDT2 and 25 topics from TDT3 .In identifying events in a topic , the annotator was asked to broadly follow the TDT definition of an event , i.e. , ` something that happens at a specific time and location ' .The annotator was encouraged to merge two events A and B into a single event C if any of the stories discusses both A and B .This is to satisfy our assumption that each story corresponds to a unique event .The annotator was also encouraged to avoid singleton events , events that contain a single news story , if possible .We realized from our own experience that people differ in their perception of an event especially when the number of stories in that event is small .As part of the guidelines , we instructed the annotator to assign titles to all the events in each topic .We believe that this would help make her understanding of the events more concrete .We however , do not use or model these titles in our algorithms .In defining dependencies between events , we imposed no restrictions on the graph structure .Each event could have single , multiple or no parents .Further , the graph could have cycles or orphannodes .The annotator was however instructed to assign a dependency from event A to event B if and only if the occurrence of B is ` either causally influenced by A or is closely related to A and follows A in time ' .From the annotated topics , we created a training set of 26 topics and a test set of 27 topics by merging the 28 topics from TDT2 and 25 from TDT3 and splitting them randomly .Table 1 shows that the training and test sets have fairly similar statistics .", "related work": "The process of threading events together is related to threading of electronic mail only by name for the most part .Email usually incorporates a strong structure of referenced messages and consistently formatted subject headings though information retrieval techniques are useful when the structure breaks down 7 .Email threading captures reference dependencies between messages and does not attempt to reflect any underlying real-world structure of the matter under discussion .Another area of research that looks at the structure within a topic is hierarchical text classification of topics 9 , 6 .The hierarchy within a topic does impose a structure on the topic , but we do not know of an effort to explore the extent to which that structure reflects the underlying event relationships .Barzilay and Lee 5 proposed a content structure modeling technique where topics within text are learnt using unsupervised methods , and a linear order of these topics is modeled using hidden Markov models .Our work differs from theirs in that we do not constrain the dependency to be linear .Also their algorithms are tuned to work on specific genres of topics such as earthquakes , accidents , etc. , while we expect our algorithms to generalize over any topic .In TDT , researchers have traditionally considered topics as flatclusters 1 .However , in TDT-2003 , a hierarchical structure of topic detection has been proposed and 2 made useful attempts to adopt the new structure .However this structure still did not explicitly model any dependencies between events .In a work closest to ours , Makkonen 8 suggested modeling news topics in terms of its evolving events .However , the paper stopped short of proposing any models to the problem .Other related work that dealt with analysis within a news topic includes temporal summarization of news topics 4 ."}