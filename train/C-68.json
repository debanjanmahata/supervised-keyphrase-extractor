{"abstract": "On-demand delivery of audio and video clips in peer-to-peer vehicular ad-hoc networks is an emerging area of research .Our target environment uses data carriers , termed zebroids , where a mobile device carries a data item on behalf of a server to a client thereby minimizing its availability latency .In this study , we quantify the variation in availability latency with zebroids as a function of a rich set of parameters such as car density , storage per device , repository size , and replacement policies employed by zebroids .Using analysis and extensive simulations , we gain novel insights into the design of carrier-based systems .Significant improvements in latency can be obtained with zebroids at the cost of a minimal overhead .These improvements occur even in scenarios with lower accuracy in the predictions of the car routes .Two particularly surprising findings are : 1 a naive random replacement policy employed by the zebroids shows competitive performance , and 2 latency improvements obtained with a simplified instantiation of zebroids are found to be robust to changes in the popularity distribution of the data items .Categories and Subject Descriptors : C. 2.4 Distributed Systems : Client/Server", "id": "C-68", "reader_keywords_stem": ["audio and video clip", "peer-to-peer vehicular ad-hoc network", "data carrier", "term zebroid", "mobil devic", "avail latenc", "car densiti", "storag per devic", "repositori size", "replac polici", "naiv random replac polici", "zebroid", "simplifi instanti of zebroid", "zebroid simplifi instanti"], "reader_keywords": ["audio and video clip", "peer-to-peer vehicular ad-hoc network", "datum carrier", "termed zebroid", "mobile device", "availability latency", "car density", "storage per device", "repository size", "replacement policy", "naive random replacement policy", "zebroid", "simplified instantiation of zebroid", "zebroid simplified instantiation"], "introduction": "Technological advances in areas of storage and wireless communications have now made it feasible to envision on-demand delivery of data items , for e.g. , video and audio clips , in vehicular peer-topeer networks .In prior work , Ghandeharizadeh et al. 10 introduce the concept of vehicles equipped with a Car-to-Car-Peer-toPeer device , termed AutoMata , for in-vehicle entertainment .The notable features of an AutoMata include a mass storage device offering hundreds of gigabytes GB of storage , a fast processor , and several types of networking cards .Even with today 's 500 GB disk drives , a repository of diverse entertainment content may exceed the storage capacity of a single AutoMata .Such repositories constitute the focus of this study .To exchange data , we assume each AutoMata is configured with two types of networking cards : 1 a low-bandwidth networking card with a long radio-range in the order of miles that enables an AutoMata device to communicate with a nearby cellular or WiMax station , 2 a high-bandwidth networking card with a limited radio-range in the order of hundreds of feet .The high bandwidth connection supports data rates in the order of tens to hundreds of Megabits per second and represents the ad hoc peer to peer network between the vehicles .This is labelled as the data plane and is employed to exchange data items between devices .The low-bandwidth connection serves as the control plane , enabling AutoMata devices to exchange meta-data with one or more centralized servers .This connection offers bandwidths in the order of tens to hundreds of Kilobits per second .The centralized servers , termed dispatchers , compute schedules of data delivery along the data plane using the provided meta-data .These schedules are transmitted to the participating vehicles using the control plane .The technical feasibility of such a two-tier architecture is presented in 7 , with preliminary results to demonstrate the bandwidth of the control plane is sufficient for exchange of control information needed for realizing such an application .In a typical scenario , an AutoMata device presents a passenger with a list of data items1 , showing both the name of each data item and its availability latency .The latter , denoted as \u03b4 , is defined as the earliest time at which the client encounters a copy of its requested data item .A data item is available immediately when it resides in the local storage of the AutoMata device serving the request .Due to storage constraints , an AutoMata may not store the entire repository .In this case , availability latency is the time from when the user issues a request until when the AutoMata encounters another car containing the referenced data item .The terms car and AutoMata are used interchangeably in this study .The availability latency for an item is a function of the current location of the client , its destination and travel path , the mobility model of the AutoMata equipped vehicles , the number of replicas constructed for the different data items , and the placement of data item replicas across the vehicles .A method to improve the availability latency is to employ data carriers which transport a replica of the requested data item from a server car containing it to a client that requested it .These data carriers are termed ` zebroids ' .Selection of zebroids is facilitated by the two-tiered architecture .The control plane enables centralized information gathering at a dispatcher present at a base-station .2 Some examples of control information are currently active requests , travel path of the clients and their destinations , and paths of the other cars .For each client request , the dispatcher may choose a set of z carriers that collaborate to transfer a data item from a server to a client z-relay zebroids .Here , z is the number of zebroids such that 0 \u2264 z < N , where N is the total number of cars .When z = 0 there are no carriers , requiring a server to deliver the data item directly to the client .Otherwise , the chosen relay team of z zebroids hand over the data item transitively to one another to arrive at the client , thereby reducing availability latency see Section 3.1 for details .To increase robustness , the dispatcher may employ multiple relay teams of z-carriers for every request .This may be useful in scenarios where the dispatcher has lower prediction accuracy in the information about the routes of the cars .Finally , storage constraints may require a zebroid to evict existing data items from its local storage to accommodate the client requested item .In this study , we quantify the following main factors that affect availability latency in the presence of zebroids : i data item repository size , ii car density , iii storage capacity per car , iv client trip duration , v replacement scheme employed by the zebroids , and vi accuracy of the car route predictions .For a significant subset of these factors , we address some key questions pertaining to use of zebroids both via analysis and extensive simulations .Our main findings are as follows .A naive random replacement policy employed by the zebroids shows competitive performance in terms of availability latency .With such a policy , substantial improvements in latency can be obtained with zebroids at a minimal replacement overhead .In more practical scenarios , where the dispatcher has inaccurate information about the car routes , zebroids continue to provide latency improvements .A surprising result is that changes in popularity of the data items do not impact the latency gains obtained with a simple instantiation of z-relay zebroids called one-instantaneous zebroids see Section 3.1 .This study suggests a number of interesting directions to be pursued to gain better understanding of design of carrier-based systems that improve availability latency .Related Work : Replication in mobile ad-hoc networks has been a widely studied topic 11 , 12 , 15 .However , none of these studies employ zebroids as data carriers to reduce the latency of the client 's requests .Several novel and important studies such as ZebraNet 13 , DakNet 14 , Data Mules 16 , Message Ferries 20 , and Seek and Focus 17 have analyzed factors impacting intermittently connected networks consisting of data carriers similar in spirit to zebroids .Factors considered by each study are dictated by their assumed environment and target application .A novel characteristic of our study is the impact on availability latency for a given database repository of items .A detailed description of related works can be obtained in 9 .The rest of this paper is organized as follows .Section 2 provides an overview of the terminology along with the factors that impact availability latency in the presence of zebroids .Section 3 describes how the zebroids may be employed .Section 4 provides details of the analysis methodology employed to capture the performance with zebroids .Section 5 describes the details of the simulation environment used for evaluation .Section 6 enlists the key questions examined in this study and answers them via analysis and simulations .Finally , Section 7 presents brief conclusions and future research directions .Table 1 summarizes the notation of the parameters used in the paper .Below we introduce some terminology used in the paper .Assume a network of N AutoMata-equipped cars , each with storage capacity of \u03b1 bytes .The total storage capacity of the system is ST = N \u00b7 \u03b1 .There are T data items in the database , each withwith ET size Si .The frequency of access to data item i is denoted as fi ,The exponent n characterizes a particular replication technique .A square-root replication scheme is realized when n = 0.5 5 .This serves as the base-line for comparison with the case when zebroids are deployed .Ri is normalized to a value between 0 and 1 .The number of replicas for data item i , denoted as ri , is : ri = min N , max 1 , bRi \u00b7 N \u00b7 \u03b1 Si c .This captures the case when at least one copy of every data item must be present in the ad-hoc network at all times .In cases where a data item may be lost from the ad-hoc network , this equation becomes ri = min N , max 0 , b Ri \u00b7 N \u00b7 \u03b1 Si c .In this case , a request for the lost data item may need to be satisfied by fetching the item from a remote server .The availability latency for a data item i , denoted as \u03b4i , is defined as the earliest time at which a client AutoMata will find the first replica of the item accessible to it .If this condition is not satisfied , then we set \u03b4i to y .This indicates that data item i was not available to the client during its journey .Note that since there is at least one replica in the system for every data item i , by setting y to a large value we ensure that the client 's request for any data item i will be satisfied .However , in most practical circumstances y may not be so large as to find every data item .We are interested in the availability latency observed across all data items .Hence , we augment the average availability latency for every data item i with its fi to obtain the following weighted availability latency \u03b4agg metric : \u03b4agg = Ti = 1 \u03b4i \u00b7 fi Next , we present our solution approach describing how zebroids are selected .", "title": "An Evaluation of Availability Latency in Carrier-based Vehicular Ad-Hoc Networks Shahram", "combined_keywords": ["audio and video clip", "peer-to-peer vehicular ad-hoc network", "datum carrier", "termed zebroid", "mobile device", "availability latency", "car density", "storage per device", "repository size", "replacement policy", "naive random replacement policy", "zebroid", "simplified instantiation of zebroid", "zebroid simplified instantiation", "mobility", "vehicular network", "automaton", "latency", "markov model"], "author_keywords": ["mobility", "vehicular network", "automaton", "latency", "replacement policy", "datum carrier", "markov model"], "method": "When a client references a data item missing from its local storage , the dispatcher identifies all cars with a copy of the data item as servers .Next , the dispatcher obtains the future routes of all cars for a finite time duration equivalent to the maximum time the client is willing to wait for its request to be serviced .Using this information , the dispatcher schedules the quickest delivery path from any of the servers to the client using any other cars as intermediate carriers .Hence , it determines the optimal set of forwarding decisionsthat will enable the data item to be delivered to the client in the minimum amount of time .Note that the latency along the quickest delivery path that employs a relay team of z zebroids is similar to that obtained with epidemic routing 19 under the assumptions of infinite storage and no interference .A simple instantiation of z-relay zebroids occurs when z = 1 and the client 's request triggers a transfer of a copy of the requested data item from a server to a zebroid in its vicinity .Such a zebroid is termed one-instantaneous zebroid .In some cases , the dispatcher might have inaccurate information about the routes of the cars .Hence , a zebroid scheduled on the basis of this inaccurate information may not rendezvous with its target client .To minimize the likelihood of such scenarios , the dispatcher may schedule multiple zebroids .This may incur additional overhead due to redundant resource utilization to obtain the same latency improvements .The time required to transfer a data item from a server to a zebroid depends on its size and the available link bandwidth .With small data items , it is reasonable to assume that this transfer time is small , especially in the presence of the high bandwidth data plane .Large data items may be divided into smaller chunks enabling the dispatcher to schedule one or more zebroids to deliver each chunk to a client in a timely manner .This remains a future research direction .Initially , number of replicas for each data item replicas might be computed using Equation 1 .This scheme computes the number of data item replicas as a function of their popularity .It is static because number of replicas in the system do not change and no replacements are performed .Hence , this is referred to as the ` nozebroids ' environment .We quantify the performance of the various replacement policies with reference to this base-line that does not employ zebroids .One may assume a cold start phase , where initially only one or few copies of every data item exist in the system .Many storage slots of the cars may be unoccupied .When the cars encounter one another they construct new replicas of some selected data items to occupy the empty slots .The selection procedure may be to choose the data items uniformly at random .New replicas are created as long as a car has a certain threshold of its storage unoccupied .Eventually , majority of the storage capacity of a car will be exhausted .The replacement policies considered in this paper are reactive since a replacement occurs only in response to a request issued for a certain data item .When the local storage of a zebroid is completely occupied , it needs to replace one of its existing items to carry the client requested data item .For this purpose , the zebroid must select an appropriate candidate for eviction .This decision process is analogous to that encountered in operating system paging where the goal is to maximize the cache hit ratio to prevent disk access delay 18 .The carrier-based replacement policies employed in our study are Least Recently Used LRU , Least Frequently Used LFU and Random where a eviction candidate is chosen uniformly at random .We have considered local and global variants of the LRU/LFU policies which determine whether local or global knowledge of contents of the cars known at the dispatcher is used for the eviction decision at a zebroid see 9 for more details .The replacement policies incur the following overheads .First , the complexity associated with the implementation of a policy .Second , the bandwidth used to transfer a copy of a data item from a server to the zebroid .Third , the average number of replacements incurred by the zebroids .Note that in the no-zebroids case neither overhead is incurred .The metrics considered in this study are aggregate availability latency , 6 , , gg , percentage improvement in 6 , , gg with zebroids as compared to the no-zebroids case and average number of replacements incurred per client request which is an indicator of the overhead incurred by zebroids .Note that the dispatchers with the help of the control plane may ensure that no data item is lost from the system .In other words , at least one replica of every data item is maintained in the ad-hoc network at all times .In such cases , even though a car may meet a requesting client earlier than other servers , if its local storage contains data items with only a single copy in the system , then such a car is not chosen as a zebroid .Here , we present the analytical evaluation methodology and some approximations as closed-form equations that capture the improvements in availability latency that can be obtained with both oneinstantaneous and z-relay zebroids .First , we present some preliminaries of our analysis methodology .random walk on a G x G torus .An additional car serves as a client yielding a total of N + 1 cars .Such a mobility model has been used widely in the literature 17 , 16 chiefly because it is amenable to analysis and provides a baseline against which performance of other mobility models can be compared .Moreover , this class of Markovian mobility models has been used to model the movements of vehicles 3 , 21 .All analysis results presented in this section are obtained assuming that the client is willing to wait as long as it takes for its request to be satisfied unbounded trip duration \u03b3 = oo .With the random walk mobility model on a 2D-torus , there is a guarantee that as long as there is at least one replica of the requested data item in the network , the client will eventually encounter this replica 2 .Extensions to the analysis that also consider finite trip durations can be obtained in 9 .Consider a scenario where no zebroids are employed .In this case , the expected availability latency for the data item is the expected meeting time of the random walk undertaken by the client with any of the random walks performed by the servers .Aldous et al. 2 show that the the meeting time of two random walks in such a setting can be modelled as an exponential distribution with the mean C = c \u2022 G \u2022 log G , where the constant c 0.17 for G > 25 .The meeting time , or equivalently the availability latency 6i , for the client requesting data item i is the time till it encounters any of these ri replicas for the first time .This is also an exponential distribution with the following expected value note that this formulation is valid only for sparse cases when G >> ri : 6i = cGlogG ri The aggregate availability latency without employing zebroids is then this expression averaged over all data items , weighted by their frequency of access :Recall that with one-instantaneous zebroids , for a given request , a new replica is created on a car in the vicinity of the server , provided this car meets the client earlier than any of the ri servers .Moreover , this replica is spawned at the time step when the client issues the request .Let Nic be the expected total number of nodes that are in the same cell as any of the ri servers .Then , we haveIn the analytical model , we assume that Nic new replicas are created , so that the total number of replicas is increased to ri + Nic .The availability latency is reduced since the client is more likely to meet a replica earlier .The aggregated expected availability latency in the case of one-instantaneous zebroids is then given by ,Note that in obtaining this expression , for ease of analysis , we have assumed that the new replicas start from random locations in the torus not necessarily from the same cell as the original ri servers .It thus treats all the Nic carriers independently , just like the ri original servers .As we shall show below by comparison with simulations , this approximation provides an upper-bound on the improvements that can be obtained because it results in a lower expected latency at the client .It should be noted that the procedure listed above will yield a similar latency to that employed by a dispatcher employing oneinstantaneous zebroids see Section 3.1 .Since the dispatcher is aware of all future car movements it would only transfer the requested data item on a single zebroid , if it determines that the zebroid will meet the client earlier than any other server .This selected zebroid is included in the Nic new replicas .To calculate the expected availability latency with z-relay zebroids , we use a coloring problem analog similar to an approach used by Spyropoulos et al. 17 .Details of the procedure to obtain a closed-form expression are given in 9 .The aggregate availability latency \u03b4a99 with z-relay zebroids is given by ,The simulation environment considered in this study comprises of vehicles such as cars that carry a fraction of the data item repository .A prediction accuracy parameter inherently provides a certain probabilistic guarantee on the confidence of the car route predictions known at the dispatcher .A value of 100 % implies that the exact routes of all cars are known at all times .A 70 % value for this parameter indicates that the routes predicted for the cars will match the actual ones with probability 0.7 .Note that this probability is spread across the car routes for the entire trip duration .We now provide the preliminaries of the simulation study and then describe the parameter settings used in our experiments .Here , we set the size of every data item , Si , to be 1 .\u03b1 represents the number of storage slots per AutoMata .Each storage slot stores one data item .y represents the duration of the client 's journey in terms of the number of time slots .Hence the possible values of availability latency are between 0 and y. \u03b4 is defined as the number of time slots after which a client AutoMata device will encounter a replica of the data item for the first time .If a replica for the data item requested was encountered by the client in the first cell then we set \u03b4 = 0 .If \u03b4 > y then we set \u03b4 = y indicating that no copy of the requested data item was encountered by the client during its entire journey .In all our simulations , for illustration we consider a 5 \u00d7 5 2D-torus with y set to 10 .Our experiments indicate that the trends in the results scale to maps of larger size .We simulated a skewed distribution of access to the T data items that obeys Zipf 's law with a mean of 0.27 .This distribution is shown to correspond to sale of movie theater tickets in the United States 6 .We employ a replication scheme that allocates replicas for a data item as a function of the square-root of the frequency of access of that item .The square-root replication scheme is shown to have competitive latency performance over a large parameter space 8 .The data item replicas are distributed uniformly across the AutoMata devices .This serves as the base-line no-zebroids case .The square-root scheme also provides the initial replica distribution when zebroids are employed .Note that the replacements performed by the zebroids will cause changes to the data item replica distribution .Requests generated as per the Zipf distribution are issued one at a time .The client car that issues the request is chosen in a round-robin manner .After a maximum period of y , the latency encountered by this request is recorded .In all the simulation results , each point is an average of 200,000 requests .Moreover , the 95 % confidence intervals determined for the results are quite tight for the metrics of latency and replacement overhead .Hence , we only present them for the metric that captures the percentage improvement in latency with respect to the no-zebroids case .In this section , we describe our evaluation results where the following key questions are addressed .With a wide choice of replacement schemes available for a zebroid , what is their effect on availability latency ?A more central question is : Do zebroids providesignificant improvements in availability latency ?What is the associated overhead incurred in employing these zebroids ?What happens to these improvements in scenarios where a dispatcher may have imperfect information about the car routes ?What inherent trade-offs exist between car density and storage per car with regards to their combined as well as individual effect on availability latency in the presence of zebroids ?We present both simple analysis and detailed simulations to provide answers to these questions as well as gain insights into design of carrier-based systems .by a zebroid impact availability latency ?For illustration , we present ` scale-up ' experiments where oneinstantaneous zebroids are employed see Figure 1 .By scale-up , we mean that \u03b1 and N are changed proportionally to keep the total system storage , ST , constant .Here , T = 50 and ST = 200 .We choose the following values of N , \u03b1 = 20,10 , 25,8 , 50,4 , 100,2 .The figure indicates that a random replacement scheme shows competitive performance .This is because of several reasons .Recall that the initial replica distribution is set as per the squareroot replication scheme .The random replacement scheme does not alter this distribution since it makes replacements blind to the popularity of a data item .However , the replacements cause dynamic data re-organization so as to better serve the currently active request .Moreover , the mobility pattern of the cars is random , hence , the locations from which the requests are issued by clients are also random and not known a priori at the dispatcher .These findings are significant because a random replacement policy can be implemented in a simple decentralized manner .The lru-global and lfu-global schemes provide a latency performance that is worse than random .This is because these policies rapidly develop a preference for the more popular data items thereby creating a larger number of replicas for them .During eviction , the more popular data items are almost never selected as a replacement candidate .Consequently , there are fewer replicas for the less popular items .Hence , the initial distribution of the data item replicas changes from square-root to that resembling linear replication .The higher number of replicas for the popular data items provide marginal additional benefits , while the lower number of replicas for the other data items hurts the latency performance of these global policies .The lfu-local and lru-local schemes have similar performance to random since they do not have enough history of local data item requests .We speculate that the performance of these local policies will approach that of their global variants for a large enough history of data item requests .On account of the competitive performance shown by a random policy , for the remainder of the paper , we present the performance of zebroids that employ a random replacement policy .We find that in many scenarios employing zebroids provides substantial improvements in availability latency .We first consider the case of one-instantaneous zebroids .Figure 2 .a shows the variation in 6,99 as a function of N for T = 10 and \u03b1 = 1 with a 10 \u00d7 10 torus using Equation 4 .Both the x and y axes are drawn to a log-scale .Figure 2 .b show the % improvement in 6,99 obtained with one-instantaneous zebroids .In this case , only the x-axis is drawn to a log-scale .For illustration , we assume that the T data items are requested uniformly .Initially , when the network is sparse the analytical approximation for improvements in latency with zebroids , obtained from Equations 2 and 4 , closely matches the simulation results .However , as N increases , the sparseness assumption for which the analysis is valid , namely N << G , is no longer true .Hence , the two curves rapidly diverge .The point at which the two curves move away from each other corresponds to a value of 6,99 \u2264 1 .Moreover , as mentioned earlier , the analysis provides an upper bound on the latency improvements , as it treats the newly created replicas given by Nic independently .However , these Nic replicas start from the same cell as one of the server replicas ri .Finally , the analysis captures a oneshot scenario where given an initial data item replica distribution , the availability latency is computed .The new replicas created do not affect future requests from the client .On account of space limitations , here , we summarize the observations in the case when z-relay zebroids are employed .The interested reader can obtain further details in 9 .Similar observations , like the one-instantaneous zebroid case , apply since the simulation and analysis curves again start diverging when the analysis assumptions are no longer valid .However , the key observation here is that the latency improvement with z-relay zebroids is significantly better than the one-instantaneous zebroids case , especially for lower storage scenarios .This is because in sparse scenarios , the transitive hand-offs between the zebroids creates higher number of replicas for the requested data item , yielding lower availability latency .Moreover , it is also seen that the simulation validation curve for the improvements in 6,99 with z-relay zebroids approaches that of the one-instantaneous zebroid case for higher storage higher N values .This is because one-instantaneous zebroids are a special case of z-relay zebroids .We conduct simulations to examine the entire storage spectrum obtained by changing car density N or storage per car \u03b1 to also capture scenarios where the sparseness assumptions for which the analysis is valid do not hold .We separate the effect of N and \u03b1 by capturing the variation of N while keeping \u03b1 constant case 1 and vice-versa case 2 both with z-relay and one-instantaneous zebroids .Here , we set the repository size as T = 25 .Figure 3 captures case 1 mentioned above .Similar trends are observed with case 2 , a complete description of those results are available in 9 .With Figure 3 .b , keeping \u03b1 constant , initially increasing car density has higher latency benefits because increasing N introduces more zebroids in the system .As N is further increased , \u03c9 reduces because the total storage in the system goes up .Consequently , the number of replicas per data item goes up thereby increasing thenumber of servers .Hence , the replacement policy can not find a zebroid as often to transport the requested data item to the client earlier than any of the servers .On the other hand , the increased number of servers benefits the no-zebroids case in bringing 6agg down .The net effect results in reduction in \u03c9 for larger values of N.2 .b \u03c9 Figure 2 : Figure 2 shows the latency performance with oneinstantaneous zebroids via simulations along with the analytical approximation for a 10 x 10 torus with T = 10 .The trends mentioned above are similar to that obtained from the analysis .However , somewhat counter-intuitively with relatively higher system storage , z-relay zebroids provide slightly lower improvements in latency as compared to one-instantaneous zebroids .We speculate that this is due to the different data item replica distributions enforced by them .Note that replacements performed by the zebroids cause fluctuations in these replica distributions which may effect future client requests .We are currently exploring suitable choices of parameters that can capture these changing replica distributions .We find that the improvements in latency with zebroids are obtained at a minimal replacement overhead < 1 per client request .With one-instantaneous zebroids , for each client request a maximum of one zebroid is employed for latency improvement .Hence , the replacement overhead per client request can amount to a maximum of one .Recall that to calculate the latency with one-instantaneousone-instantaneous and z-relay zebroids as a function of the car density when \u03b1 = 2 and T = 25 .zebroids , Nic new replicas are created in the same cell as the servers .Now a replacement is only incurred if one of these Nic newly created replicas meets the client earlier than any of the ri servers .Let Xri and XNc respectively be random variables that capture i the minimum time till any of the ri and Nic replicas meet the client .Since Xri and XNc are assumed to be independent , by the property i of exponentially distributed random variables we have ,Recall that the number of replicas for data item i , ri , is a function of the total storage in the system i.e. , ri = k \u2022 N \u2022 \u03b1 where k satisfies the constraint 1 < ri < N. Using this along with Equation 2 , we getNow if we keep the total system storage N \u2022 \u03b1 constant since G and T are also constant , increasing N increases the replacement overhead .However , if N \u2022 \u03b1 is constant then increasing N causes \u03b1ploying one-instantaneous zebroids as a function of N , \u03b1 values , when the total storage in the system is kept fixed , ST = 200 .to go down .This implies that a higher replacement overhead is incurred for higher N and lower \u03b1 values .Moreover , when ri = N , this means that every car has a replica of data item i. Hence , no zebroids are employed when this item is requested , yielding an overhead/request for this item as zero .Next , we present simulation results that validate our analysis hypothesis for the overhead associated with deployment of one-instantaneous zebroids .Figure 4 shows the replacement overhead with one-instantaneous zebroids when N , \u03b1 are varied while keeping the total system storage constant .The trends shown by the simulation are in agreement with those predicted by the analysis above .However , the total system storage can be changed either by varying car density N or storage per car \u03b1 .On account of similar trends , here we present the case when \u03b1 is kept constant and N is varied Figure 5 .We refer the reader to 9 for the case when \u03b1 is varied and N is held constant .We present an intuitive argument for the behavior of the perrequest replacement overhead curves .When the storage is extremely scarce so that only one replica per data item exists in the AutoMata network , the number of replacements performed by the zebroids is zero since any replacement will cause a data item to be lost from the system .The dispatcher ensures that no data item is lost from the system .At the other end of the spectrum , if storage becomes so abundant that \u03b1 = T then the entire data item repository can be replicated on every car .The number of replacements is again zero since each request can be satisfied locally .A similar scenario occurs if N is increased to such a large value that another car with the requested data item is always available in the vicinity of the client .However , there is a storage spectrum in the middle where replacements by the scheduled zebroids result in improvements in 6agg see Figure 3 .Moreover , we observe that for sparse storage scenarios , the higher improvements with z-relay zebroids are obtained at the cost of a higher replacement overhead when compared to the one-instantaneous zebroids case .This is because in the former case , each of these z zebroids selected along the lowest latency path to the client needs to perform a replacement .However , the replacement overhead is still less than 1 indicating that on an average less than one replacement per client request is needed even when z-relay zebroids are employed .function of the prediction accuracy metric with \u03b1 = 2 and T = 25 .We find that zebroids continue to provide improvements in availability latency even with lower accuracy in the car route predictions .We use a single parameter p to quantify the accuracy of the car route predictions .Since p represents the probability that a car route predicted by the dispatcher matches the actual one , hence , the latency with zebroids can be approximated by ,Expressions for 6agg zeb can be obtained from Equations 4 one-instantaneous or 5 z-relay zebroids .improvement in \u03b4agg as the prediction accuracy metric reduces .For zebroids that are scheduled but fail to rendezvous with the client due to the prediction error , we tag any such replacements made by the zebroids as failed .It is seen that failed replacements gradually increase as the prediction accuracy reduces .ments in availability latency with zebroids maximized ?Surprisingly , we find that the improvements in latency obtained with one-instantaneous zebroids are independent of the input distribution of the popularity of the data items .The fractional difference labelled \u03c9 in the latency between the no-zebroids and one-instantaneous zebroids is obtained from equations 2 , 3 , and 4 asHere C = c \u00b7 G \u00b7 log G .This captures the fractional improvement in the availability latency obtained by employing one-instantaneous zebroids .Let \u03b1 = 1 , making the total storage in the system ST = N. Assuming the initial replica distribution is as per the squareroot replication scheme , we have , ri = T \u221a fj .Hence , we getabove equation to get , \u03c9 = 1 Ti = 1 ri In order to determine when the gains with one-instantaneous zebroids are maximized , we can frame an optimization problem as follows : Maximize \u03c9 , subject to / teTi = 1 ri = ST THEOREM 1 .With a square-root replication scheme , improvements obtained with one-instantaneous zebroids are independent of the input popularity distribution of the data items .See 9 for proofWe perform simulations with two different frequency distribution of data items : Uniform and Zipfian with mean = 0.27 .Similar latency improvements with one-instantaneous zebroids are obtained in both cases .This result has important implications .In cases with biased popularity toward certain data items , the aggregate improvements in latency across all data item requests still remain the same .Even in scenarios where the frequency of access to the data items changes dynamically , zebroids will continue to provide similar latency improvements .In this study , we examined the improvements in latency that can be obtained in the presence of carriers that deliver a data item from a server to a client .We quantified the variation in availability latency as a function of a rich set of parameters such as car density , storage per car , title database size , and replacement policies employed by zebroids .Below we summarize some key future research directions we intend to pursue .To better reflect reality we would like to validate the observations obtained from this study with some real world simulation traces of vehicular movements for example using CORSIM 1 .This will also serve as a validation for the utility of the Markov mobility model used in this study .We are currently analyzing the performance of zebroids on a real world data set comprising of an ad-hoc network of buses moving around a small neighborhood in Amherst 4 .Zebroids may also be used for delivery of data items that carry delay sensitive information with a certain expiry .Extensions to zebroids that satisfy such application requirements presents an interesting future research direction .", "author_keywords_stem": ["mobility", "vehicular network", "automaton", "latency", "replacement policy", "datum carrier", "markov model"], "combined_keywords_stem": ["audio and video clip", "peer-to-peer vehicular ad-hoc network", "data carrier", "term zebroid", "mobil devic", "avail latenc", "car densiti", "storag per devic", "repositori size", "replac polici", "naiv random replac polici", "zebroid", "simplifi instanti of zebroid", "zebroid simplifi instanti", "mobil", "vehicular network", "automaton", "latenc", "markov model"]}