{"abstract": "The characteristics of mobile environments , with the possibility of frequent disconnections and fluctuating bandwidth , have forced a rethink of traditional middleware .In particular , the synchronous communication paradigms often employed in standard middleware do not appear to be particularly suited to ad hoc environments , in which not even the intermittent availability of a backbone network can be assumed .Instead , asynchronous communication seems to be a generally more suitable paradigm for such environments .Message oriented middleware for traditional systems has been developed and used to provide an asynchronous paradigm of communication for distributed systems , and , recently , also for some specific mobile computing systems .In this paper , we present our experience in designing , implementing and evaluating EMMA Epidemic Messaging Middleware for Ad hoc networks , an adaptation of Java Message Service JMS for mobile ad hoc environments .We discuss in detail the design challenges and some possible solutions , showing a concrete example of the feasibility and suitability of the application of the asynchronous paradigm in this setting and outlining a research roadmap for the coming years .", "id": "C-74", "reader_keywords_stem": ["asynchron messag middlewar ", "mobil ad-hoc environ", "epidem messag middlewar", "messag-orient middlewar", "java messag servic", "asynchron commun", "epidem protocol", "cross-layer", "applic level rout", "group commun"], "reader_keywords": ["asynchronous messaging middleware ", "mobile ad-hoc environment", "epidemic messaging middleware", "message-oriented middleware", "java messaging service", "asynchronous communication", "epidemic protocol", "cross-layering", "application level routing", "group communication"], "title": "Adapting Asynchronous Messaging Middleware to Ad Hoc Networking", "combined_keywords": ["asynchronous messaging middleware ", "mobile ad-hoc environment", "epidemic messaging middleware", "message-oriented middleware", "java messaging service", "asynchronous communication", "epidemic protocol", "cross-layering", "application level routing", "group communication", "message orient middleware", "middleware for mobile computing", "mobile ad-hoc network", "context awareness"], "author_keywords": ["message orient middleware", "middleware for mobile computing", "epidemic protocol", "mobile ad-hoc network", "context awareness"], "method": "Message-oriented middleware systems support communication between distributed components via message-passing : the sender sends a message to identified provider on the wired network .However , this approach is somewhat limited in terms of widespread applicability and scalability as a consequence of the concentration of functionality in the wired portion of the network .If JMS is to be adapted to completely ad hoc environments , where no fixed infrastructure is available , and where nodes change location and status very dynamically , more issues must be taken into consideration .Firstly , discovery needs to use a resilient but distributed model : in this extremely dynamic environment , static solutions are unacceptable .As discussed in Section 2 , a JMS administrator defines queues and topics on the provider .Clients can then learn about them using the Java Naming and Directory Interface JNDI .However , due to the way JNDI is designed , a JNDI node or more than one needs to be in reach in order to obtain a binding of a name to an address i.e. , knowing where a specific queue/topic is .In mobile ad hoc environments , the discovery process can not assume the existence of a fixed set of discovery servers that are always reachable , as this would not match the dynamicity of ad hoc networks .Secondly , a JMS Provider , as suggested by the JMS specification , also needs to be reachable by each node in the network , in order to communicate .This assumes a very centralised architecture , which again does not match the requirements of a mobile ad hoc setting , in which nodes may be moving and sparse : a more distributed and dynamic solution is needed .Persistence is , however , essential functionality in asynchronous communication environments as hosts are , by definition , connected at different times .In the following section , we will discuss our experience in designing and implementing JMS for mobile ad hoc networks .Developing applications for mobile networks is yet more challenging : in addition to the same considerations as for infrastructured wireless environments , such as the limited device capabilities and power constraints , there are issues of rate of change of network connectivity , and the lack of a static routing infrastructure .Consequently , we now describe an initial attempt to adapt the JMS specification to target the particular requirements related to ad hoc scenarios .As discussed in Section 3 , a JMS application can use either the rather than the exception .In other words , we can not consider disconnections as failures .For these reasons , we adopt a slightly different semantics .With respect to durable subscriptions , if a subscriber becomes disconnected , notifications are not stored but are sent using the epidemic protocol rather than the synchronous protocol .In other words , durable notifications remain valid during the possible disconnections of the subscriber .On the other hand , if a non-durable subscriber becomes disconnected , its subscription is deleted ; in other words , during disconnections , notifications are not sent using the epidemic protocol but exploit only the synchronous protocol .If the topic becomes accessible to this host again , it must make another subscription in order to receive the notifications .Unsubscription messages are delivered in the same way as are subscription messages .It is important to note that durable subscribers have explicitly to unsubscribe from a topic in order to stop the notification process ; however , all durable subscriptions have a predefined expiration time in order to cope with the cases of subscribers that do not meet again because of their movements or failures .This feature is clearly provided to limit the number of the unnecessary messages sent around the network .In this section , we examine one possible mechanism that will allow the delivery of messages in a partially connected network .The mechanism we discuss is intended for the purposes of demonstrating feasibility ; more efficient communication mechanisms for this environment are themselves complex , and are the subject of another paper 13 .The asynchronous message delivery described above is based on a typical pure epidemic-style routing protocol 16 .A message that needs to be sent is replicated on each host in reach .In this way , copies of the messages are quickly spread through connected networks , like an infection .If a host becomes connected to another cloud of mobile nodes , during its movement , the message spreads through this collection of hosts .Epidemic-style replication of data and messages has been exploited in the past in many fields starting with the distributed database systems area 2 .Within epidemic routing , each host maintains a buffer containing the messages that it has created and the replicas of the messages generated by the other hosts .To improve the performance , a hash-table indexes the content of the buffer .When two hosts connect , the host with the smaller identifier initiates a so-called successfully delivered that is updated as part of the normal process of information exchange between the hosts .The lists are exchanged during the first steps of the anti-entropic epidemic protocol with a certain predefined frequency .In the case of messages with multiple recipients , a list of the actual recipients is also stored .When a host receives the list , it checks its message buffer and updates it according to the following rules : 1 if a message has a single recipient and it has been delivered , it is deleted from the buffer ; 2 if a message has multiple recipients , the identifiers of the delivered hosts are deleted from the associated list of recipients .If the resulting length of the list of recipients is zero , the message is deleted from the buffer .These lists have , clearly , finite dimensions and are implemented as circular queues .This simple mechanism , together with the use of expiration timestamps , guarantees that the old acknowledgment notifications are deleted from the system after a limited period of time .In order to improve the reliability of EMMA , a design mechanism for intelligent replication of queues and topics based on the context information could be developed .However this is not yet part of the current architecture of EMMA .We implemented a prototype of our platform using the J2ME Personal Profile .The size of the executable is about 250KB including the JMS 1.1 jar file ; this is a perfectly acceptable figure given the available memory of the current mobile devices on the market .We tested our prototype on HP IPaq PDAs running Linux , interconnected with WaveLan , and on a number of laptops with the same network interface .We also evaluated the middleware platform using the OMNET + + discrete event simulator 17 in order to explore a range of mobile scenarios that incorporated a more realistic number of hosts than was achievable experimentally .More specifically , we assessed the performance of the system in terms of delivery ratio and average delay , varying the density of population and the buffer size , and using persistent and non-persistent messages with different priorities .The simulation results show that the EMMA 's performance , in terms of delivery ratio and delay of persistent messages with higher priorities , is good .In general , it is evident that the delivery ratio is strongly related to the correct dimensioning of the buffers to the maximum acceptable delay .Moreover , the epidemic algorithms are able to guarantee a high delivery ratio if one evaluates performance over a time interval sufficient for the dissemination of the replicas of messages i.e. , the dleware system based on messaging that is specifically designed for mobile environments .The platform is composed of three classes of components : mobile clients implementing the JMS specification , gateways that control traffic , guaranteeing efficiency and possible user customizations using different plug-ins and JMS servers .Different configurations of these components are possible ; with respect to mobile ad hoc networks applications , the most interesting is", "author_keywords_stem": ["message orient middleware", "middleware for mobile computing", "epidemic protocol", "mobile ad-hoc network", "context awareness"], "combined_keywords_stem": ["asynchron messag middlewar ", "mobil ad-hoc environ", "epidem messag middlewar", "messag-orient middlewar", "java messag servic", "asynchron commun", "epidem protocol", "cross-layer", "applic level rout", "group commun", "messag orient middlewar", "middlewar for mobil comput", "mobil ad-hoc network", "context awar"]}