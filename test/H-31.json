{"abstract": "Many variants of language models have been proposed for information retrieval .Most existing models are based on multinomial distribution and would score documents based on query likelihood computed based on a query generation probabilistic model .In this paper , we propose and study a new family of query generation models based on Poisson distribution .We show that while in their simplest forms , the new family of models and the existing multinomial models are equivalent , they behave differently for many smoothing methods .We show that the Poisson model has several advantages over the multinomial model , including naturally accommodating per-term smoothing and allowing for more accurate background modeling .We present several variants of the new model corresponding to different smoothing methods , and evaluate them on four representative TREC test collections .The results show that while their basic models perform comparably , the Poisson model can outperform multinomial model with per-term smoothing .The performance can be further improved with two-stage smoothing .", "id": "H-31", "conclusions": "We present a new family of query generation language models for retrieval based on Poisson distribution .We derive several smoothing methods for this family of models , including single-stage smoothing and two-stage smoothing .We compare the new models with the popular multinomial retrieval models both analytically and experimentally .Our analysis shows that while our new models and multinomial models are equivalent under some assumptions , they are generally different with some important differences .In particular , we show that Poisson has an advantage over multinomial in naturally accommodating per-term smoothing .We exploit this property to develop a new per-term smoothing algorithm for Poisson language models , which is shown to outperform term-independent smoothing for both Poisson and multinomial models .Furthermore , we show that a mixture background model for Poisson can be used to improve the performance and robustness over the standard Poisson background model .Our work opens up many interesting directions for further exploration in this new family of models .Further exploring the flexibilities over multinomial language models , such as length normalization and pseudo-feedback could be good future work .It is also appealing to find robust methods to learn the per-term smoothing coefficients without additional computation cost .", "reader_keywords_stem": ["multinomi distribut", "queri gener probabilist model", "poisson distribut", "two-stage smooth", "multivari bernoullu distribut", "speech recognit", "term frequenc", "perterm smooth", "new term-depend smooth algorithm", "vocabulari set", "homogen poisson process", "singl pseudo term"], "combined_keywords_stem": ["multinomi distribut", "queri gener probabilist model", "poisson distribut", "two-stage smooth", "multivari bernoullu distribut", "speech recognit", "term frequenc", "perterm smooth", "new term-depend smooth algorithm", "vocabulari set", "homogen poisson process", "singl pseudo term", "languag model", "poisson process", "queri gener", "formal model", "term depend smooth"], "introduction": "As a new type of probabilistic retrieval models , language models have been shown to be effective for many retrieval tasks 21 , 28 , 14 , 4 .Among many variants of language models proposed , the most popular and fundamental one is the query-generation language model 21 , 13 , which leads to the query-likelihood scoring method for ranking documents .In such a model , given a query q and a document d , we compute the likelihood of `` generating '' query q with a model estimated based on document d , i.e. , the conditional probability p q | d .We can then rank documents based on the likelihood of generating the query .Virtually all the existing query generation language models are based on either multinomial distribution 19 , 6 , 28 or multivariate Bernoulli distribution 21 , 18 .The multinomial distribution is especially popular and also shown to be quite effective .The heavy use of multinomial distribution is partly due to the fact that it has been successfully used in speech recognition , where multinomial distribution is a natural choice for modeling the occurrence of a particular word in a particular position in text .Compared with multivariate Bernoulli , multinomial distribution has the advantage of being able to model the frequency of terms in the query ; in contrast , multivariate Bernoulli only models the presence and absence of query terms , thus can not capture different frequencies of query terms .However , multivariate Bernoulli also has one potential advantage over multinomial from the viewpoint of retrieval : in a multinomial distribution , the probabilities of all the terms must sum to 1 , making it hard to accommodate per-term smoothing , while in a multivariate Bernoulli , the presence probabilities of different terms are completely independent of each other , easily accommodating per-term smoothing and weighting .Note that term absence is also indirectly captured in a multinomial model through the constraint that all the term probabilities must sum to 1 .In this paper , we propose and study a new family of query generation models based on the Poisson distribution .In this new family of models , we model the frequency of each term independently with a Poisson distribution .To score a document , we would first estimate a multivariate Poisson model based on the document , and then score it based on the likelihood of the query given by the estimated Poisson model .In some sense , the Poisson model combines the advantage of multinomial in modeling term frequency and the advantage of the multivariate Bernoulli in accommodating per-term smoothing .Indeed , similar to the multinomial distribution , the Poisson distribution models term frequencies , but without the constraint that all the term probabilities must sum to 1 , and similar to multivariate Bernoulli , it models each term independently , thus can easily accommodate per-term smoothing .As in the existing work on multinomial language models , smoothing is critical for this new family of models .We derive several smoothing methods for Poisson model in parallel to those used for multinomial distributions , and compare the corresponding retrieval models with those based on multinomial distributions .We find that while with some smoothing methods , the new model and the multinomial model lead to exactly the same formula , with some other smoothing methods they diverge , and the Poisson model brings in more flexibility for smoothing .In particular , a key difference is that the Poisson model can naturally accommodate perterm smoothing , which is hard to achieve with a multinomial model without heuristic twist of the semantics of a generative model .We exploit this potential advantage to develop a new term-dependent smoothing algorithm for Poisson model and show that this new smoothing algorithm can improve performance over term-independent smoothing algorithms using either Poisson or multinomial model .This advantage is seen for both one-stage and two-stage smoothing .Another potential advantage of the Poisson model is that its corresponding background model for smoothing can be improved through using a mixture model that has a closed form formula .This new background model is shown to outperform the standard background model and reduce the sensitivity of retrieval performance to the smoothing parameter .The rest of the paper is organized as follows .In Section 2 , we introduce the new family of query generation models with Poisson distribution , and present various smoothing methods which lead to different retrieval functions .In Section 3 , we analytically compare the Poisson language model with the multinomial language model , from the perspective of retrieval .We then design empirical experiments to compare the two families of language models in Section 4 .We discuss the related work in 5 and conclude in 6 .", "evaluation": "In Section 3 , we analytically compared the Poisson language models and multinomial language models from the perspective of query generation and retrieval .In this section , we compare these two families of models empirically .Experiment results show that the Poisson model with perterm smoothing outperforms multinomial model , and the performance can be further improved with two-stage smoothing .Using Poisson mixture as background model also improves the retrieval performance .Since retrieval performance could significantly vary from one test collection to another , and from one query to another , we select four representative TREC test collections : AP , Trec7 , Trec8 , and Wt2g Web .To cover different types of queries , we follow 28 , 5 , and construct short-keyword SK , keyword title , short-verbose SV , one sentence description , and long-verbose LV , multiple sentences queries .The documents are stemmed with the Porter 's stemmer , and we do not remove any stop word .For each parameter , we vary its value to cover a reasonably wide range .We compare the performance of the Poisson retrieval models and multinomial retrieval models using interpolation JelinekMercer , JM smoothing and Bayesian smoothing with conjugate priors .Table 1 shows that the two JM-smoothed models perform similarly on all data sets .Since the Dirichlet Smoothing for multinomial language model and the Gamma Smoothing for Poisson language model lead to the same retrieval formula , the performance of these two models are jointly presented .We see that Dirichlet/Gamma smoothing methods outperform both Jelinek-Mercer smoothing methods .The parameter sensitivity curves for two Jelinek-Mercersmoothing methods are shown in Figure 1 .Clearly , these two methods perform similarly either in terms of optimalityAn asterisk * indicates that the difference between the performance of the term dependent two-stage smoothing and that of the Dirichlet/Gamma single smoothing is statistically significant according to the Wilcoxon signed rank test at the level of 0.05 .or sensitivity .This similarity of performance is expected as we discussed in Section 3.1 .Although the Poisson model and multinomial model are similar in terms of the basic model and/or with simple smoothing methods , the Poisson model has great potential and flexibility to be further improved .As shown in the rightmost column of Table 1 , term dependent two-stage Poisson model consistently outperforms the basic smoothing models , especially for verbose queries .This model is given in Formula 4 , with a Gamma smoothing for the document model P \u00b7 | d , and 6. , which is term dependent .The parameter \u00b5 of the first stage Gamma smoothing is empirically tuned .The combination coefficients i.e. , \u0394 , are estimated with the EM algorithm in Section 3.2 .The parameter sensitivity curves for Dirichlet/Gamma and the per-term two-stage smoothing model are plotted in Figure 2 .The per-term two-stage smoothing method is less sensitive to the parameter \u00b5 than Dirichlet/Gamma , and yields better optimal performance .In the following subsections , we conduct experiments to demonstrate how the flexibility of the Poisson model could be utilized to achieve better performance , which we can not achieve with multinomial language models .To test the effectiveness of the term dependent smoothing , we conduct the following two experiments .In the first experiment , we relax the constant coefficient in the simple Jelinek-Mercer smoothing formula i.e. , Formula 3 , and use the EM algorithm proposed in Section 3.2 to find a 6 .for each unique term .Since we are using the EM algorithm to iteratively estimate the parameters , we usually do not want the probability of P \u00b7 | d to be zero .We then use a simple Laplace method to slightly smooth the document model before it goes into the EM iterations .The documents are then still scored with Formula 3 , but using learnt 6 ..The results are labeled with `` JM+L . ''in Table 2 .An asterisk * in Column 3 indicates that the difference between the `` JM+L . ''method and JM method is statistically significant ; an asterisk * in Column 5 means that the difference between term dependent two-stage method and query dependent two-stage method is statistically significant ; PT stands for `` per-term '' .With term dependent coefficients , the performance of the Jelinek-Mercer Poisson model is improved in most cases .However , in some cases e.g. , Trec7/SV , it performs poorly .This might be caused by the problem of EM estimation with unsmoothed document models .Once non-zero probability is assigned to all the terms before entering the EM iteration , the performance on verbose queries can be improved significantly .This indicates that there is still room to find better methods to estimate 6 ..Please note that neither the perterm JM method nor the `` JM+L . ''method has a parameter to tune .As shown in Table 1 , the term dependent two-stage smoothing can significantly improve retrieval performance .To understand whether the improvement is contributed by the term dependent smoothing or the two-stage smoothing framework , we design another experiment to compare the perterm two-stage smoothing with the two-stage smoothing method proposed in 29 .Their method managed to find coefficients specific to the query , thus a verbose query would use a higher 6 .However , since their model is based on multinomial language modeling , they could not get per-term coefficients .We adopt their method to the Poisson two-stagesmoothing , and also estimate a per-query coefficient for all the terms .We compare the performance of such a model with the per-term two-stage smoothing model , and present the results in the right two columns in Table 2 .Again , we see that the `` per-term '' two-stage smoothing outperforms the `` per-query '' two-stage smoothing , especially for verbose queries .The improvement is not as large as how the perterm smoothing method improves over Dirichlet/Gamma .This is expected , since the per-query smoothing has already addressed the query discrimination problem to some extent .This experiment shows that even if the smoothing is already per-query , making it per-term is still beneficial .In brief , the per-term smoothing improved the retrieval performance of both one-stage and two-stage smoothing method .In this section , we conduct experiments to examine the benefits of using a mixture background model without extra computational cost , which can not be achieved for multinomial models .Specifically , in retrieval formula 3 , instead of using a single Poisson distribution to model the background P \u00b7 | C , we use Katz 's K-Mixture model , which is essentially a mixture of Poisson distributions .P \u00b7 | C can be computed efficiently with simple collection statistics , as discussed in Section 3.3 .The performance of the JM retrieval model with single Poisson background and with Katz 's K-Mixture background model is compared in Table 3 .Clearly , using K-Mixture to model the background model outperforms the single Poisson background model in most cases , especially for verbose queries where the improvement is statistically significant .Figure 3 shows that the performance changes over different parameters for short verbose queries .The model using K-Mixture background is less sensitive than the one using single Poisson background .Given that this type of mixturesensitivity of verbose queries background model does not require any extra computation cost , it would be interesting to study whether using other mixture Poisson models , such as 2-Poisson and negative Binomial , could help the performance .", "method": "In the query generation framework , a basic assumption is that a query is generated with a model estimated based on a document .In most existing work 12 , 6 , 28 , 29 , people assume that each query word is sampled independently from a multinomial distribution .Alternatively , we assume that a query is generated by sampling the frequency of words from a series of independent Poisson processes 20 .Let V = w1 , ... , wn be a vocabulary set .Let w be a piece of text composed by an author and hc w1 , ... , c wn i be a frequency vector representing w , where c wi , w is the frequency count of term wi in text w .In retrieval , w could be either a query or a document .We consider the frequency counts of the n unique terms in w as n different types of events , sampled from n independent homogeneous Poisson processes , respectively .Suppose t is the time period during which the author composed the text .With a homogeneous Poisson process , the frequency count of each event , i.e. , the number of occurrences of wi , follows a Poisson distribution with associated parameter \u03bbit , where \u03bbi is a rate parameter characterizing the expected number of wi in a unit time .The probability density function of such a Poisson Distribution is given byWithout losing generality , we set t to the length of the text w people write one word in a unit time , i.e. , t = | w | .With n such independent Poisson processes , each explaining the generation of one term in the vocabulary , the likelihood of w to be generated from such Poisson processes can be written aswhere \u039b = \u03bb1 , ... , \u03bbn and | w | = En i = 1 c wi , w .We refer to these n independent Poisson processes with parameter \u039b as a Poisson Language Model .Let D = d1 , ... , dm be an observed set of document samples generated from the Poisson process above .The maximum likelihood estimate MLE of \u03bbi isNote that this MLE is different from the MLE for the Poisson distribution without considering the document lengths , which appears in 22 , 24 .Given a document d , we may estimate a Poisson language model \u039bd using d as a sample .The likelihood that a query q is generated from the document language model \u039bd can be written asThis representation is clearly different from the multinomial query generation model as 1 the likelihood includes all the terms in the vocabulary V , instead of only those appearing in q , and 2 instead of the appearance of terms , the event space of this model is the frequencies of each term .In practice , we have the flexibility to choose the vocabulary V .In one extreme , we can use the vocabulary of the whole collection .However , this may bring in noise and considerable computational cost .In the other extreme , we may focus on the terms in the query and ignore other terms , but some useful information may be lost by ignoring the nonquery terms .As a compromise , we may conflate all the non-query terms as one single pseudo term .In other words , we may assume that there is exactly one `` non-query term '' in the vocabulary for each query .In our experiments , we adopt this `` pseudo non-query term '' strategy .A document can be scored with the likelihood in Equation 1 .However , if a query term is unseen in the document , the MLE of the Poisson distribution would assign zero probability to the term , causing the probability of the query to be zero .As in existing language modeling approaches , the main challenge of constructing a reasonable retrieval model is to find a smoothed language model for p \u00b7 | d .In general , we want to assign non-zero rates for the query terms that are not seen in document d .Many smoothing methods have been proposed for multinomial language models 2 , 28 , 29 .In general , we have to discount the probabilities of some words seen in the text to leave some extra probability mass to assign to the unseen words .In Poisson language models , however , we do not have the same constraint as in a multinomial model i.e. , EwEV p w | d = 1 .Thus we do not have to discount the probability of seen words in order to give a non-zero rate to an unseen word .Instead , we only need to guarantee that Ek = 0,1,2 , ... p c w , d = k | d = 1 .In this section , we introduce three different strategies to smooth a Poisson language model , and show how they lead to different retrieval functions .Following the risk minimization framework in 11 , we assume that a document is generated by the arrival of terms in a time period of IdI according to the document language model , which essentially consists of a vector of Poisson rates for each term , i.e. , \u039bd = \u03bbd ,1 , ... , \u03bbd , | V | .A document is assumed to be generated from a potentially different model .Given a particular document d , we want to estimate \u039bd .The rate of a term is estimated independently of other terms .We use Bayesian estimation with the following Gamma prior , which has two parameters , \u03b1 and \u03b2 :For each term w , the parameters \u03b1w and \u03b2w are chosen to be \u03b1w = \u00b5 * \u03bbC , w and \u03b2w = \u00b5 , where \u00b5 is a parameter and \u03bbC , w is the rate of w estimated from some background language model , usually the `` collection language model '' .The posterior distribution of \u039bd is given byThis is precisely the smoothed estimate of multinomial language model with Dirichlet prior 28 .Another straightforward method is to decompose the query generation model as a mixture of two component models .One is the document language model estimated with maximum likelihood estimator , and the other is a model estimated from the collection background , p \u2022 IC , which assigns non-zero rate to w. For example , we may use an interpolation coefficient between 0 and 1 i.e. , \u03b4 E 0 , 1 .With this simple interpolation , we can score a document withWe can also use a Poisson language model for p \u2022 IC , or use some other frequency-based models .In the retrieval formula above , the first summation can be computed efficiently .The second summation can be actually treated as a document prior , which penalizes long documents .As the second summation is difficult to compute efficiently , we conflate all non-query terms as one pseudo `` non-queryterm '' , denoted as `` N '' .Using the pseudo-term formulation and a Poisson collection model , we can rewrite the retrieval formula aswhere \u03bbd , N = | d | \u2212 Ew \u2208 q c w , d and \u03bbC , N = | C | \u2212 Ew \u2208 q c w , CAs discussed in 29 , smoothing plays two roles in retrieval : 1 to improve the estimation of the document language model , and 2 to explain the common terms in the query .In order to distinguish the content and non-discriminative words in a query , we follow 29 and assume that a query is generated by sampling from a two-component mixture of Poisson language models , with one component being the document model \u039bd and the other being a query background language model p \u2022 IU .p \u2022 IU models the `` typical '' term frequencies in the user 's queries .We may then score each document with the query likelihood computed using the following two-stage smoothing model :where \u03b4 is a parameter , roughly indicating the amount of `` noise '' in q .This looks similar to the interpolation smoothing , except that p \u2022 I\u039bd now should be a smoothed language model , instead of the one estimated with MLE .With no prior knowledge on p \u2022 IU , we could set it to p \u2022 IC .Any smoothing methods for the document language model can be used to estimate p \u2022 Id such as the Gamma smoothing as discussed in Section 2.2.1 .The empirical study of the smoothing methods is presented in Section 4 .From the previous section , we notice that the Poisson language model has a strong connection to the multinomial language model .This is expected since they both belong to the exponential family 26 .However , there are many differences when these two families of models are applied with different smoothing methods .From the perspective of retrieval , will these two language models perform equivalently ?If not , which model provides more benefits to retrieval , or provides flexibility which could lead to potential benefits ?In this section , we analytically discuss the retrieval features of the Poisson language models , by comparing their behavior with that of the multinomial language models .Let us begin with the assumption that all the query terms appear in every document .Under this assumption , no smoothing is needed .A document can be scored by the log likelihood of the query with the maximum likelihood estimate :Using the MLE , we have \u03bbd , w = c w , dThis is exactly the log likelihood of the query if the document language model is a multinomial with maximum likelihood estimate .Indeed , even with Gamma smoothing , when plugging \u03bbd , w = c w , d + \u00b5\u03bbC , wwhich is exactly the Dirichlet retrieval formula in 28 .Note that this equivalence holds only when the document length variation is modeled with Poisson process .This derivation indicates the equivalence of the basic Poisson and multinomial language models for retrieval .With other smoothing strategies , however , the two models would be different .Nevertheless , with this equivalence in basic models , we could expect that the Poisson language model performs comparably to the multinomial language model in retrieval , if only simple smoothing is explored .Based on this equivalence analysis , one may ask , why we should pursue the Poisson language model .In the following sections , we show that despite the equivalence in their basic models , the Poisson language model brings in extra flexibility for exploring advanced techniques on various retrieval features , which could not be achieved with multinomial language models .One flexibility of the Poisson language model is that it provides a natural framework to accommodate term dependent per-term smoothing .Existing work on language model smoothing has already shown that different types of queries should be smoothed differently according to how discriminative the query terms are .7 also predicted that different terms should have a different smoothing weights .With multinomial query generation models , people usually use a single smoothing coefficient to control the combination of the document model and the background model 28 , 29 .This parameter can be made specific for different queries , but always has to be a constant for all the terms .This is mandatory since a multinomial language model has the constraint that Ew2V p wId = 1 .However , from retrieval perspective , different terms may need to be smoothed differently even if they are in the same query .For example , a non-discriminative term e.g. , `` the '' , `` is '' is expected to be explained more with the background model , while a content term e.g. , `` retrieval '' , `` bush '' in the query should be explained with the document model .Therefore , a better way of smoothing would be to set the interpolation coefficient i.e. , \u03b4 in Formula 2 and Formula 3 specifically for each term .Since the Poisson language model does not have the `` sum-to-one '' constraint across terms , it can easily accommodate per-term smoothing without needing to heuristically twist the semantics of a generative model as in the case of multinomial language models .Below we present a possible way to explore term dependent smoothing with Poisson language models .Essentially , we want to use a term-specific smoothing coefficient \u03b4 in the linear combination , denoted as \u03b4w .This coefficient should intuitively be larger if w is a common word and smaller if it is a content word .The key problem is to find a method to assign reasonable values to \u03b4w .Empirical tuning is infeasible for so many parameters .We may instead estimate the parameters `` \u0394 = \u03b41 , ... , \u03b4jV j '' by maximizing the likelihood of the query given the mixture model of p qI\u039bQ and p qIU , where \u039bQ is the `` true '' query model to generate the query and p qIU is a query background model as discussed in Section 2.2.3 .With the model p qI\u039bQ hidden , the query likelihood isIf we have relevant documents for each query , we can approximate the query model space with the language models of all the relevant documents .Without relevant documents , we opt to approximate the query model space with the models of all the documents in the collection .Setting p \u2022 IU as p \u2022 IC , the query likelihood becomeswhere \u03c0d = p \u02c6\u039bdIU .p \u2022 I \u02c6\u039bd is an estimated Poisson language model for document d .If we have prior knowledge on p \u02c6\u039bdIU , such as which documents are relevant to the query , we can set \u03c0d accordingly , because what we want is to find \u0394 that can maximize the likelihood of the query given relevant documents .Without this prior knowledge , we can leave \u03c0d as free parameters , and use the EM algorithm to estimate \u03c0d and \u0394 .The updating functions are given asd dEC \u03c0d wEV 1 \u03b4w p c w , q I\u02c6\u039bd + \u03b4wp c w , q IC andAs discussed in 29 , we only need to run the EM algorithm for several iterations , thus the computational cost is relatively low .We again assume our vocabulary containing all query terms plus a pseudo non-query term .Note that the function does not give an explicit way of estimating the coefficient for the unseen non-query term .In our experiments , we set it to the average over \u03b4w of all query terms .With this flexibility , we expect Poisson language models could improve the retrieval performance , especially for verbose queries , where the query terms have various discriminative values .In Section 4 , we use empirical experiments to prove this hypothesis .Another flexibility is to explore different background collection models i.e. , p \u2022 IU , or p \u2022 IC .One common assumption made in language modeling information retrieval is that the background model is a homogeneous model of the document models 28 , 29 .Similarly , we can also make the assumption that the collection model is a Poisson language model , with the rates \u03bbC , w = jCj .However , this assumption usually does not hold , since the collection is far more complex than a single document .Indeed , thecollection usually consists of a mixture of documents with various genres , authors , and topics , etc. .Treating the collection model as a mixture of document models , instead of a single `` pseudo-document model '' is more reasonable .Existing work of multinomial language modeling has already shown that a better modeling of background improves the retrieval performance , such as clusters 15 , 10 , neighbor documents 25 , and aspects 8 , 27 .All the approaches can be easily adopted using Poisson language models .However , a common problem of these approaches is that they all require heavy computation to construct the background model .With Poisson language modeling , we show that it is possible to model the mixture background without paying for the heavy computational cost .Poisson Mixture 3 has been proposed to model a collection of documents , which can fit the data much better than a single Poisson .The basic idea is to assume that the collection is generated from a mixture of Poisson models , which has the general form ofp \u00b7 | A is a single Poisson model and p A is an arbitrary probability density function .There are three well known Poisson mixtures 3 : 2-Poisson , Negative Binomial , and the Katz 's K-Mixture 9 .Note that the 2-Poisson model has actually been explored in probabilistic retrieval models , which led to the well-known BM25 formula 22 .All these mixtures have closed forms , and can be estimated from the collection of documents efficiently .This is an advantage over the multinomial mixture models , such as PLSI 8 and LDA 1 , for retrieval .For example , the probability density function of Katz 's K-Mixture is given aswhere 77k ,0 = 1 when k = 0 , and 0 otherwise .With the observation of a collection of documents , \u03b1w andwhere cf w and df w are the collection frequency and document frequency of w , and N is the number of documents in the collection .To account for the different document lengths , we assume that ,3 w is a reasonable estimation for generating a document of the average length , and useavdl | q | to generate the query .This Poisson mixture model can be easily used to replace P \u00b7 | C in the retrieval functions 3 and 4 .In addition to term dependent smoothing and efficient mixture background , a Poisson language model has also some other potential advantages .For example , in Section 2 , we see that Formula 2 introduces a component which does document length penalization .Intuitively , when the document has more unique words , it will be penalized more .On the other hand , if a document is exactly n copies of another document , it would not get over penalized .This feature is desirable and not achieved with the Dirichlet model 5 .Potentially , this component could penalize a document according to what types of terms it contains .With term specific settings of S , we could get even more flexibility for document length normalization .Pseudo-feedback is yet another interesting direction where the Poission model might be able to show its advantage .With model-based feedback , we could again relax the combination coefficients of the feedback model and the background model , and allow different terms to contribute differently to the feedback model .We could also utilize the `` relevant '' documents to learn better per-term smoothing coefficients .", "title": "A Study of Poisson Query Generation Model for Information Retrieval", "author_keywords_stem": ["languag model", "poisson process", "queri gener", "formal model", "term depend smooth"], "related work": "To the best of our knowledge , there has been no study of query generation models based on Poisson distribution .Language models have been shown to be effective for many retrieval tasks 21 , 28 , 14 , 4 .The most popular and fundamental one is the query-generation language model 21 , 13 .All existing query generation language models are based on either multinomial distribution 19 , 6 , 28 , 13 or multivariate Bernoulli distribution 21 , 17 , 18 .We introduce a new family of language models , based on Poisson distribution .Poisson distribution has been previously studied in the document generation models 16 , 22 , 3 , 24 , leading to the development of one of the most effective retrieval formula BM25 23 .24 studies the parallel derivation of three different retrieval models which is related to our comparison of Poisson and multinomial .However , the Poisson model in their paper is still under the document generation framework , and also does not account for the document length variation .26 introduces a way to empirically search for an exponential model for the documents .Poisson mixtures 3 such as 2-Poisson 22 , Negative multinomial , and Katz 's KMixture 9 has shown to be effective to model and retrieve documents .Once again , none of this work explores Poisson distribution in the query generation framework .Language model smoothing 2 , 28 , 29 and background structures 15 , 10 , 25 , 27 have been studied with multinomial language models .7 analytically shows that term specific smoothing could be useful .We show that Poisson language model is natural to accommodate the per-term smoothing without heuristic twist of the semantics of a generative model , and is able to efficiently better model the mixture background , both analytically and empirically ."}