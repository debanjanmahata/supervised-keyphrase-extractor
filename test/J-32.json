{"id": "J-32", "reader_keywords_stem": ["graphic game", "larg-scale distribut network", "nash equilibrium", "degre", "dynam program-base algorithm", "ppad-complet", "bound-degre tree", "gener algorithm", "respons polici", "downstream pass", "breakpoint polici"], "combined_keywords_stem": ["graphic game", "larg-scale distribut network", "nash equilibrium", "degre", "dynam program-base algorithm", "ppad-complet", "bound-degre tree", "gener algorithm", "respons polici", "downstream pass", "breakpoint polici"], "introduction": "Graphical games were introduced in the papers of Kearns et al. 8 and Littman et al. 9 as a succinct representation of games with a large number of players .The classical normal form or matrix form representation has a size that is exponential in the number of players , making it unsuitable for large-scale distributed games .A graphical game associates each player with a vertex of an underlying graph G , and the payoff to that player is a function of the actions chosen by himself and his neighbours in G ; if G has low degree , this is a concise way to represent a game with many players .The papers 8 , 9 give a dynamic-programming algorithm for finding Nash equilibria in graphical games where there are two actions per player and G is a tree .The first of these papers describes a generic algorithm for this problem that can be specialized in two ways : as an algorithm that computes approximations to all Nash equilibria in time polynomial in the input size and the approximation quality , or as an exponential-time algorithm that allows the exact computation of all Nash equilibria in G .In 9 , the authors propose a modification to the latter algorithm that aims to find a single Nash equilibrium in polynomial time .This does not quite work , as we show in Section 3 , though it introduces a useful idea .The generic algorithm of 8 consists of two phases which we will refer to as the upstream pass and the downstream pass ; 1 the former starts at the leaves of the tree and ends at the root , while the latter starts at the root and ends at the leaves .It is assumed that each player has two pure strategies actions , which are denoted by 0 and 1 ; it follows that any mixed strategy can be represented as a single number x \u2208 0 , 1 , where x is the probability that the player selects 1 .During the upstream pass , each vertex V computes the set of its potential best responses to every mixed strategy w of its parent W ; a strategy v is a potential best response to w if 1Note that the terminology `` upstream '' and `` downstream '' are reversed in 8 , 9 our trees are rooted at the top .there is a Nash equilibrium in the graphical game downstream of V inclusive given that W plays w for a more technical definition , the reader is referred to Section 2 .The output of this stage can be viewed as a continuous table T w , v , where T w , v = 1 if and only if v is a potential best response to w ; we refer to this table as the best response policy for V .The generic algorithm does not address the problem of representing the best response policy ; in fact , the most important difference between the two instantiations of the generic algorithm described in 8 is in their approach to this issue .The computation is performed inductively : the best response policy for V is computed based on the best response policies of V 's children U1 , ... , Uk .By the end of the upstream pass , all children of the root have computed their best response policies .In the beginning of the downstream pass , the root selects its strategy and informs its children about its choice .It also selects a strategy for each child .A necessary and sufficient condition for the algorithm to proceed is that the strategy of the root is a best response to the strategies of its children and , for each child , the chosen strategy is one of the pre-computed potential best responses to the chosen strategy of the root .The equilibrium then propagates downstream , with each vertex selecting its children 's actions .The action of the child is chosen to be any strategy from the pre-computed potential best responses to the chosen strategy of the parent .To bound the running time of this algorithm , the paper 8 shows that any best response policy can be represented as a union of an exponential number of rectangles ; the polynomial time approximation algorithm is obtained by combining this representation with a polynomial-sized grid .The main idea of 9 is that it is not necessary to keep track of all rectangles in the best response policies ; rather , at each step of the upstream pass , it is possible to select a polynomial-size subset of the corresponding policy in 9 , this subset is called a breakpoint policy , and still ensure that the downstream pass can proceed successfully a sufficient condition for this is that the subset of the best response policy for V stored by the algorithm contains a continuous path from w = 0 to w = 1 .One of the main contributions of our paper is to show that the algorithm proposed by 9 is incorrect .In Section 3 we describe a simple example for which the algorithm of 9 outputs a vector of strategies that does not constitute a Nash equilibrium of the underlying game .In Sections 4 , 5 and 6 we show how to fix the algorithm of 9 so that it always produces correct output .Section 4 considers the case in which the underlying graph is a path of length n. For this case , we show that the number of rectangles in each of the best response policies is O n2 .This gives us an O n3 algorithm for finding a Nash equilibrium , and for computing a representation of all Nash equilibria .This algorithm is a special case of the generic algorithm of 8 we show that it runs in polynomial time when the underlying graph is a path .We can improve the running time of the generic algorithm using the ideas of 9 .In particular , we give an O n2 algorithm for finding a Nash equilibrium of a graphical game on a path of length n. Instead of storing best response policies , this algorithm stores appropriately-defined subsets , which , following 9 , we call breakpoint policies modifying the definition as necessary .We obtain the following theorem THEOREM 1 .There is an O n2 algorithm that finds a Nash equilibrium of a graphical game with two actions per player on an n-vertex path .There is an O n3 algorithm that computes a representation of all Nash equilibria of such a game .In Section 5 we extend the results of Section 4 to general degree2 graphs , obtaining the following theorem .THEOREM 2 .There is a polynomial-time algorithm thatfinds a Nash equilibrium of a graphical game with two actions per player on a graph with maximum degree 2 .In Section 6 we extend our algorithm so that it can be used to find a Nash equilibrium of a graphical game on an arbitrary tree .Even when the tree has bounded degree , the running time can be exponential .We show that this is inevitable by constructing a family of graphical games on bounded-degree trees for which best response policies of some of the vertices have exponential size , and any twopass algorithm i.e. , an algorithm that is similar in spirit to that of 8 has to store almost all points of the best response policies .In particular , we show the following .THEOREM 3 .There is an infinite family ofgraphical games on bounded-degree trees with pathwidth 2 such that any two-pass algorithm for finding Nash equilibria on these trees requires exponential time and space .It is interesting to note that the trees used in the proof of Theorem 3 have pathwidth 2 , that is , they are very close to being paths .It is an open question whether our algorithm runs in polynomial time for graphs of pathwidth 1 .This question can be viewed as a generalization of a very natural computational geometry problem we describe it in more detail in Section 8 .In Section 7 , we give a complexity-theoretic intractability result for the problem of finding a Nash equilibrium of a graphical game on a graph with small pathwidth .We prove the following theorem .THEOREM 4 .Consider the problem offinding a Nash equilibrium for a graphical game in which the underlying graph has maximum degree 3 and pathwidth k .There is a constant k such that this problem is PPAD-complete .Theorem 4 limits the extent to which we can exploit `` path-like '' properties of the underlying graph , in order to find Nash equilibria .To prove Theorem 4 , we use recent PPAD-completeness results for games , in particular the papers 7 , 4 which show that the problem of finding Nash equilibria in graphical games of degree d for d > 3 is computationally equivalent to the problem of solving r-player normal-form games for r > 4 , both of which are PPAD-complete .", "title": "Nash Equilibria in Graphical Games on Trees Revisited *Graphical games have been proposed as a game-theoretic model of large-scale distributed networks of non-cooperative agents .When the number of players is large , and the underlying graph has low degree , they provide a concise way to represent the players ' payoffs .It has recently been shown that the problem of finding Nash equilibria in a general degree-3 graphical game with two actions per player is complete for the complexity class PPAD , indicating that it is unlikely that there is any polynomial-time algorithm for this problem .In this paper , we study the complexity of graphical games with two actions per player on bounded-degree trees .This setting was first considered by Kearns , Littman and Singh , who proposed a dynamic programming-based algorithm that computes all Nash equilibria of such games .The running time of their algorithm is exponential , though approximate equilibria can be computed efficiently .Later , Littman , Kearns and Singh proposed a modification to this algorithm that can find a single Nash equilibrium in polynomial time .We show that this modified algorithm is incorrect the output is not always a Nash equilibrium .We then propose a new algorithm that is based on the ideas of Kearns et al. and computes all Nash equilibria in quadratic time if the input graph is a path , and in polynomial time if it is an arbitrary graph of maximum degree 2 .Moreover , our algorithm can be used to compute Nash equilibria of graphical games on arbitrary trees , but the running time can be exponential , even when the tree has bounded degree .We show that this is inevitable any algorithm of this type will take exponential time , even on bounded-degree trees with pathwidth 2 .It is an open question whether our algorithm runs in polynomial time on graphs with pathwidth 1 , but we show that finding a Nash equilibrium for a 2-action graphical game in which the underlying graph has maximum degree 3 and constant pathwidth is PPAD-complete so is unlikely to be tractable .* This research is supported by the EPSRC research grants `` Algorithmics of Network-sharing Games '' and `` Discontinuous Behaviour in the Complexity of randomized Algorithms '' .", "method": "We consider graphical games in which the underlying graph G is an n-vertex tree .Each vertex has two actions , which are denoted by 0 and 1 .A mixed strategy is given by a single number x \u2208 0 , 1 , which denotes the probability that the player selects action 1 .Fur the purposes of the algorithm , the tree is rooted arbitrarily .For convenience , we assume without loss of generality that the root has a single child , and that its payoff is independent of the action chosen by the child .This can be achieved by first choosing an arbitrary root of the tree , and then adding a dummy `` parent '' of this root , giving the new parent a constant payoff function .Given an edge V , W of the tree G , and a mixed strategy w for W , let G V , W , W = w be the instance obtained from G by 1 deleting all nodes Z which are separated from V by W i.e. , all nodes Z such that the path from Z to V passes through W , and 2 restricting the instance so that W is required to play mixed strategy w. Definition 1 .Suppose that V , W is an edge of the tree , that v is a mixed strategy for V and that w is a mixed strategy for W.We say that v is a potential best response to w denoted by v \u2208 pbrV w if there is an equilibrium in the instance G V , W , W = w in which V has mixed strategy v .We define the best response policy for V , given W , as B W , V = w , v | v \u2208 pbrV w , w \u2208 0 , 1 .Typically , W is the parent of V , and this is just referred to as `` the best response policy for V '' .The expression B W , V | V = v is used to denote the set B W , V \u2229 0 , 1 \u00d7 v .The upstream pass of the generic algorithm of 8 computes the best response policy for V for every node V other than the root .With the above assumptions about the root , the downstream pass is straightforward : Let W denote the root and V denote its child .The root selects any pair w , v from B W , V .It decides to play mixed strategy w and it instructs V to play mixed strategy v .The remainder of the downward pass is recursive .When a node V is instructed by its parent to adopt mixed strategy v , it does the following for each child U It finds a pair v , u \u2208 B V , U with the same v value that it was given by its parent and instructs U to play u.The algorithm of 9 is based on the following observation : to compute a single Nash equilibrium by a two-pass algorithm , it is not necessary to construct the entire best response policy for each vertex .As long as , at each step of the downstream pass , the vertex under consideration can select a vector of strategies for all its children so that each child 's strategy is a potential best response to the parent 's strategy , the algorithm succeeds in producing a Nash equilibrium .This can be achieved if , at the beginning of the downstream pass , we have a data structure in which each vertex V with parent W stores a set \u02c6B W , V \u2286 B W , V called a breakpoint policy which covers every possible w \u2208 0 , 1 .We will show later that a sufficient condition for the construction of such a data structure is the invariant that , at every level of the upstream pass , \u02c6B W , V contains a continuous path from w = 0 to w = 1 .In 9 , it is suggested that we can select the breakpoint policy in a particular way .Namely , the paper uses the following definition : Definition 2 .cf. 9 A breakpoint policy for a node V with parent W consists of an ordered set of W-breakpoints w0 = 0 < w1 < w2 < \u00b7 \u00b7 \u00b7 < wt \u2212 1 < wt = 1 and an associated set of V values v1 , ... , vt. .The interpretation is that for any w \u2208 0 , 1 , if wi \u2212 1 < w < wi for some index i and W plays w , then V shall play vi ; and if w = wi for some index i , then V shall play any value between vi and vi +1 .We say such a breakpoint policy has t \u2212 1 breakpoints .The paper then claims that any vertex V can compute its breakpoint policy with respect to its parent W given the breakpoint policies of its children U1 , ... , Uk .The proof proceeds by ordering the children 's breakpoints i.e. , the respective values of v from left to right it can be assumed without loss of generality that all these breakpoints are distinct and considering them in turn ; each such point vl \u2208 v1 , ... , vL corresponds to a fixed choice of strategies for k \u2212 1 children and an interval of admissible strategies for one child .Assume for convenience that this child is U1 and its interval of admissible strategies at vl is a , b ; assume also that for Uj , j = 2 , ... , k , their respective breakpoint policies prescribe them to play uj in response to vl .Let P i u , w , i = 0 , 1 , be the expected payoff for V when V plays i , U1 plays u , each Uj , j = 2 , ... , k , plays uj , and W plays w , and consider the set Wl = w \u2208 0 , 1 | \u2203 u \u2208 a , b s.t. P 0 u , w = P1 u , w ; note that for any w \u2208 Wl we have vl \u2208 pbrV w .The authors show that for any breakpoint vl , the set Wl is either empty , a single interval , or a union of two non-floating intervals an interval is non-floating if one of its endpoints is 0 or 1 ; moreover , the union of all sets Wl , l = 1 , ... , L , covers the interval 0 , 1 .It follows easily that one can cover 0 , 1 with at most L + 2 intervals , each of which is a subset of some Wl .The authors then claim that any such cover can be transformed into a breakpoint policy for V .Namely , they say that for any two intervals Wl1 and Wl2 in the cover , `` Any overlap between Wl1 and Wl2 can be arbitrarily assigned coverage by Wl1 and Wl2 `` trimmed '' accordingly cf. 9 , p. 5 .They illustrate their approach in a figure , which is reproduced as Figure 1 here .In the figure , the dashed horizontal lines represent the breakpoints v1 , v2 , ... , v7 and the solid intervals along these breakpoints are the sets W1 , W2 , ... , W7 .The thick connected path is the corresponding breakpoint policy .It is chosen as follows : begin on the left , and always `` jump '' to the interval allowing greatest progress to the right .To see why this approach does not work in general , consider a path of length 4 consisting of an indifferent root R , its child W , W 's child V , and V 's child U. Suppose that U receives a payoff of 1 if it plays differently to V and 0 otherwise .Thus , if v denotes the mixed strategy of V i.e. , V plays 1 with probability v , then the expected payoff that U derives from playing 0 is given by P0 U = v and the expected payoff that U derives from playing 1 is given by P1 U = 1 \u2212 v. Suppose that V derives no payoff from playing 1 so P1 V = 0 and that its payoff matrix for playing 0 is 1 \u2212 9Using the techniques of 8 or , alternatively , those of Section 4 , it is not hard to verify that the best response policies for U and V as in Definition 1 are given by the graphs in Figure 2 .The best response policy for U is a breakpoint policy for U as in Definition 2 with V breakpoints v0 = 0 , v1 = 1/2 and v2 = 1 with associated values u1 = 1 and u2 = 0 .The best response policy for V is not a breakpoint policy because of how the curve from w = 0 to w = 1 `` doubles back '' .The LKS algorithm would `` trim '' to get a breakpoint policy such as the one in Figure 3 .Note that this breakpoint policy \u02c6B W , V is invalid in the sense that it does not satisfy \u02c6B W , V \u2286 B W , V .The point is that the payoff matrix of W can now be chosen to prevent the LKS algorithm from finding a Nash equilibrium .For example , suppose the payoffs are given so that P0 W = v and P1 W = 1 \u2212 v 2 .The best response policy for W is a horizontal line at w = .1 This is the value of w that allows v = 2/3 see Figure 2 , which makes P0 W = P1 W .In the downward pass , the chosen values are w = .1 , then , from the trimming , v = 0 and u = 1 , which is not a Nash equilibrium since W prefers action 1 .The failure of the algorithm is not caused by the fact that the trimming policy goes as far to the right as possible .Any other `` trimming '' would be just as bad .For example , suppose the breakpoint policy for V has v = 0 until some point w \u2217 < .9 and then jumps to v = 1 .The algorithm is then defeated by the payoff matrix with P0 W = 2v and P1 W = 1 \u2212 v in which the best response policy for W is a horizontal line at w = .9 .The algorithm then gives w = .9 , v = 1 , and u = 0 , which is not a Nash equilibrium since W prefers action 0 .We conclude that the LKS algorithm does not always find a Nash equilibrium .In Sections 4 and 6 we show how to modify the algorithm so that it always finds a Nash equilibrium .For the modified algorithm , we have to extend the definition of `` breakpoint policy '' see Definition 3 so that it includes breakpoint policies such as the best response policy for V in Figure 2 .Unfortunately , such a breakpoint policy may be exponential in size see Figure 7 so the corrected algorithm does not run in polynomial time on all trees .In the next section , we show that it runs in polynomial time on a path .In this section , we focus on the case when the underlying graph is a path , i.e. , its vertex set is V1 , ... , Vn , and its edge set is Vj , Vj +1 | j = 1 , ... , n \u2212 1 .We show that in this case the best response policy for each vertex can be represented as a union of a polynomial number of rectangles , where a rectangle is defined by a pair of closed intervals IV , IU and consists of all points in IV \u00d7 IU ; it may be the case that one or both of the intervals IV and IU consists of a single point .THEOREM 5 .For any j = 1 , ... , n , the set B Vj , Vj \u2212 1 can be represented as a disjoint union of at most j + 4 2 rectangles .Moreover , given such representation of B Vj , Vj \u2212 1 , one can compute a representation of B Vj +1 , Vj in time O j2 .PROOF .For any set A \u2286 0 , 1 2 that is represented as a union of a finite number of rectangles , we say that a point u \u2208 0 , 1 on the U-axis is a U-event point of A if u = 0 or u = 1 or A contains a rectangle of the form IV \u00d7 IU and u is an endpoint of IU ; V event points are defined similarly .Observe that for any u \u2208 0 , 1 , the number of connected components of 0 , 1 \u00d7 u \u2229 A is at most the number of V event points of A .We use induction on j to show that for each Vj the statement of the theorem holds and , additionally , each B Vj , Vj \u2212 1 has at most 2j + 4 event points .To simplify the base case , we modify the graphical game by appending a dummy vertex V0 to the beginning of the path : the only neighbour of V0 is V1 , the payoffs of V0 are always equal to 0 , and the payoffs of all other vertices including V1 are the same as in the original game .For j = 0 , we have B V1 , V0 = 0 , 1 2 , so the statement of the theorem is trivially true .Now , suppose that j > 0 , set V = Vj and let U = Vj \u2212 1 and W = Vj +1 be the vertices that precede and follow V , respectively .The payoffs to V are described by a 2 \u00d7 2 \u00d7 2 matrix P : Pxyz is the payoff that V receives when U plays x , V plays y , and W plays z , where x , y , z \u2208 0 , 1 .Suppose that U plays 1 with probability u and W plays 1 with probability w .Then V 's expected payoff from playing 0 is P0 = 1 \u2212 u 1 \u2212 w P000 + 1 \u2212 u wP001 + u 1 \u2212 w P100 + uwP101 , while its expected payoff from playing 1 is P1 = 1 \u2212 u 1 \u2212 w P010 + 1 \u2212 u wP011 + u 1 \u2212 w P110 + uwP111 .If P0 > P1 , V strictly prefers to play 0 , if P0 < P1 , V strictly prefers to play 1 , and if P0 = P1 , V is indifferent , i.e. , can play any mixed strategy .Since P0 and P1 are linear in w and u , there exist some constants A1 , A0 , B1 , and B0 that depend on the matrix P , but not on u and w , such thatDepending on the values of A1 , A0 , B1 , and B0 , we subdivide the rest of the proof into the following cases .In this case , P0 > P1 if and only if A1u + A0 < 0 .If also A1 = 0 , A0 = 0 , clearly , B W , V = 0 , 1 2 , and the statement of the theorem is trivially true .Otherwise , the vertex V is indifferent between 0 and 1 if and only if A1 = ~ 0 and u = \u2212 A0/A1 .Let V = v | v \u2208 0 , 1 , \u2212 A0/A1 \u2208 pbrU v .By the inductive hypothesis , V consists of at most 2 j \u2212 1 + 4 segments and isolated points .For any v \u2208 V , we have B W , V | V = v = 0 , 1 : no matter what W plays , as long as U is playing \u2212 A0/A1 , V is content to play v. On the other hand , for any v \u2208 0 , 1 \\ V we have B W , V | V = v = \u2205 : when V plays v , U can only respond with u = ~ \u2212 A0/A1 , in which case V can benefit from switching to one of the pure strategies .To complete the description of B W , V , it remains to analyze the cases v = 0 and v = 1 .The vertex V prefers to play 0 if A1 > 0 and u \u2264 \u2212 A0/A1 , or A1 < 0 and u \u2265 \u2212 A0/A1 , orA1 = 0 and A0 < 0 .Assume for now that A1 > 0 ; the other two cases can be treated similarly .In this case 0 \u2208 pbrV w for some w \u2208 0 , 1 if and only if there exists a u \u2208 pbrU 0 such that u \u2264 \u2212 A0/A1 : if no such u exists , whenever V plays 0 either U 's response is not in pbrU 0 or V can improve its payoff by playing 1 .Therefore , either B W , V | V = 0 = 0 , 1 or B W , V | V = 0 = \u2205 .Similarly , B W , V | V = 1 is equal to either 0 , 1 or \u2205 , depending on pbrU 1 .Therefore , the set B W , V consists of at most 2j + 4 \u2264 j + 4 2 rectangles : B W , V \u2229 0 , 1 \u00d7 0 , 1 = 0 , 1 \u00d7 V contributes at most 2j + 2 rectangles , and each of the sets B W , V | V = 0 and B W , V | V = 1 contributes at most one rectangle .Similarly , its total number of event points is at most 2j + 4 : the only W-event points are 0 and 1 , each V event point of B W , V is a V-event point of B V , U , and there are at most 2j + 2 of them .In this case , V is indifferent between 0 and 1 if and only if w = \u03b1 , or B1 = ~ 0 and u = \u2212 B0/B1 = \u2212 A0/A1 .Similarly to the previous case , we can show that B W , V \u2229 0 , 1 \u00d7 0 , 1 consists of the rectangle \u03b1 \u00d7 0 , 1 and at most 2j + 2 rectangles of the form 0 , 1 \u00d7 IV , where each IV corresponds to a connected component of B V , U | U = B0 / B1 .Furthermore , V prefers to play 0 if B1u + B0 > 0 and w \u2265 \u03b1 or B1u + B0 < 0 and w \u2264 \u03b1 .Therefore , if B1u * + B0 > 0 for some u * \u2208 pbrU 0 , then B W , V | V = 0 contains \u03b1 , + \u221e \u2229 0 , 1 and if B1u ** + B0 < 0 for some u ** \u2208 pbrU 0 , then B W , V | V = 0 contains \u2212 \u221e , \u03b1 \u2229 0 , 1 ; if both u * and u ** exist , B W , V | V = 0 = 0 , 1 .The set B W , V | V = 1 can be described in a similar manner .By the inductive hypothesis , B V , U has at most 2j + 2 event points ; as at least two of these are U-event points , it has at most 2j V event points .Since each V event point of B W , V is a V event point of B V , U and B W , V has at most 3 W-event points 0 , 1 , and \u03b1 , its total number of event points is at most 2j + 3 < 2j + 4 .Also , similarly to the previous case it follows that B W , V consists of at most 2j + 4 < j + 4 2 rectangles .In this case , one can define the indifference function f \u00b7 asinto zero simultaneously .Observe that whenever w = f u and u , w \u2208 0 , 1 , V is indifferent between playing 0 and 1 .For any A \u2286 0 , 1 2 , we define a function \u02c6fV by \u02c6fV A = f u , v | v , u \u2208 A ; note that \u02c6fV maps subsets of 0 , 1 2 to subsets of R \u00d7 0 , 1 .Sometimes we drop the subscript V when it is clear from the context .PROOF .Fix an arbitrary v \u2208 0 , 1 .Suppose that U plays some u \u2208 pbrU v , w = f u satisfies w \u2208 0 , 1 , and W plays w .There exists a vector of strategies v1 , ... , vj-1 = u , vj = v such that for each Vk , k < j , its strategy is a best response to its neighbours ' strategies .Since w = f u , V is indifferent between playing 0 and 1 ; in particular , it can play v. Therefore , if we define vj +1 = w , the vector of strategies v1 , ... , vj +1 will satisfy the conditions in the definition of potential best response , i.e. , we have v \u2208 pbrV w .Conversely , suppose v \u2208 pbrV w for some w \u2208 0 , 1 , v = ~ 0 , 1 .Then there exists a vector of strategies v1 , ... , vj-1 , vj = v , vj +1 = w such that for each Vk , k \u2264 j , its strategy is a best response to its neighbours ' strategies .As v = ~ 0 , 1 , V is , in fact , indifferent between playing 0 and 1 , which is only possible if w = f vj-1 .Choose u = vj-1 ; by construction , u \u2208 pbrU v .Lemma 1 describes the situations when V is indifferent between playing 0 and playing 1 .However , to fully characterize B W , V , we also need to know when V prefers a pure strategy .LEMMA 2 .For any w \u2208 0 , 1 , we have w , 0 \u2208 \u02c6f 0 if and only if 0 \u2208 pbrV w and w , 1 \u2208 f\u02c6 1 if and only if 1 \u2208 pbrV w .PROOF .Consider an arbitrary u0 \u2208 pbrU 0 .If B u0 > 0 , for u = u0 the inequality P0 \u2265 P1 is equivalent to w \u2265 f u0 .Therefore , when U plays u0 and W plays w , w \u2265 f u0 , V prefers to play 0 ; as u0 \u2208 pbrU u , it follows that 0 \u2208 pbrV w .The argument for the case B u0 < 0 is similar .Conversely , if 0 \u2208 pbrV w for some w \u2208 0 , 1 , there exists a vector v1 , ... , vj-1 , vj = 0 , vj +1 = w such that for each Vk , k \u2264 j , Vk plays vk , and this strategy is a best response to the strategies of Vk 's neighbours .Note that for any such vector we have vj-1 \u2208 pbrU 0 .By way of contradiction , assume w , 0 \u2208 ~ UuEpbrU 0 Ru .Then it must be the case that for any u0 \u2208 pbrU 0 either f u0 < w and Ru0 = \u2212 \u221e , f u0 \u00d7 0 or f u0 > w and Ru0 = f u0 , + \u221e \u00d7 0 .In both cases , when V plays 0 , U plays u0 , and V plays w , the inequality between f u0 and w is equivalent to P0 < P1 , i.e. , V would benefit from switching to 1 .The argument for \u02c6f 1 is similar .Together , Lemma 1 and Lemma 2 completely describe the set B W , V : we haveIt remains to show that B W , V can be represented as a union of at most j + 4 2 rectangles , has at most 2j + 4 event points , and can be computed in O j2 time .Set u * = \u2212 B0/B1 .2 Consider an arbitrary rectangle R = v1 , v2 \u00d7 u1 , u2 \u2286 B V , U .If u * \u2208 ~ u1 , u2 , the function f \u00b7 is continuous on u1 , u2 and hence f\u02c6 R = fmin , fmax \u00d7 v1 , v2 , where fmin = min f u1 , f u2 , fmax = max f u1 , f u2 , i.e. , in this case f\u02c6 R \u2229 0 , 1 2 consists of a single rectangle .Now , suppose that R is intersected by the line 0 , 1 \u00d7 u * ; as was noted earlier , there are at most 2j + 2 such rectangles .Suppose that limu_u \u2217 \u2212 f u = + \u221e ; as f \u00b7 is a fractional linear function , this implies that limu_u \u2217 + f u = \u2212 \u221e and also f u1 > f u2 .Since f \u00b7 is continuous on u1 , u * and u * , u2 , it is easy to see that2The case B1 = 0 causes no special problems .For completeness , set u * to be any value outside of 0 , 1 in this case .and \u02c6f v1 , v2 \u00d7 u * , u2 = \u2212 \u221e , f u2 \u00d7 v1 , v2 , i.e. , in this case \u02c6f R \u2229 0 , 1 2 consists of at most two rectangles .The case limu .u \u2217 \u2212 f u = \u2212 \u221e is similar .As f\u02c6 B V , U = URCS V , U \u02c6f R , it follows that \u02c6f B V , U consists of at most j + 3 2 + 2j + 2 rectangles .Also , it is easy to see that both f\u02c6 0 and f\u02c6 1 consist of at most 2 line segments each .We conclude that B W , V can be represented as a union of at most j + 3 2 + 2j + 6 < j + 4 2 rectangles .Moreover , if v is a V event point of B W , V , then v is a V event point of B V , U this includes the cases v = 0 and v = 1 , as 0 and 1 are V event points of B V , U and if w is a W-event point of B W , V , then either w = 0 or w = 1 or there exists some u \u2208 0 , 1 such that w = f u and u is a U-event point of B V , U .Hence , B W , V has at most 2j + 4 event points .The O j2 bound on the running time in Theorem 5 follows from our description of the algorithm .The O n3 bound on the overall running time for finding a Nash equilibrium and a representation of all Nash equilibria follows .The upper bound on the running time of our algorithm is tight , at least assuming the straightforward implementation , in which each B Vj +1 , Vj is stored as a union of rectangles : it is not hard to construct an example in which the size of B Vj +1 , Vj is \u03a9 j2 .However , in some cases it is not necessary to represent all Nash equilibria ; rather , the goal is to find an arbitrary equilibrium of the game .In this section , we show that this problem can be solved in quadratic time , thus obtaining a proof of Theorem 1 .Our solution is based on the idea of 9 , i.e. , working with subsets of the best response policies rather than the best response policies themselves ; following 9 , we will refer to such subsets as breakpoint policies .While it is not always possible to construct a breakpoint policy as defined in 9 , we show how to modify this definition so as to ensure that a breakpoint policy always exists ; moreover , we prove that for a path graph , the breakpoint policy of any vertex can be stored in a data structure whose size is linear in the number of descendants this vertex has .Definition 3 .A breakpointpolicy \u02c6B V , U for a vertex U whose parent is V is a non-self-intersecting curve of the formwhere Xi = vi_1 , vi \u00d7 ui , Yi = vi \u00d7 ui , ui +1 and ui , vi \u2208 0 , 1 for i = 0 , ... , m .We say that a breakpoint policy is valid if v0 = 0 , vm = 1 , and \u02c6B V , U \u2286 B V , U .We will sometimes abuse notation by referring to \u02c6B V , U as a collection of segments Xi , Yi rather than their union .Note that we do not require that vi \u2264 vi +1 or ui \u2264 ui +1 ; consequently , in any argument involving breakpoint policies , all segments are to be treated as directed segments .Observe that any valid breakpoint policy \u02c6B V , U can be viewed as a continuous 1 1 mapping \u03b3 t =As explained in Section 3 , we can use a valid breakpoint policy instead of the best response policy during the downstream pass , and still guarantee that in the end , we will output a Nash equilibrium .Theorem 6 shows that one can inductively compute valid breakpoint policies for all vertices on the path ; the proof of this theorem can be found in the full version of this paper 6 .THEOREM 6 .For any V = Vj , one canfind in polynomial time a valid breakpoint policy \u02c6B W , V that consists of at most 2j + 1 segments .In this section we show how the algorithm for paths can be applied to solve a game on any graph whose vertices have degree at most 2 .A graph having maximum degree 2 is , of course , a union of paths and cycles .Since each connected component can be handled independently , to obtain a proof of Theorem 2 , we only need to show how to deal with cycles .Given a cycle with vertices V1 , ... , Vk in cyclic order , we make two separate searches for a Nash equilibrium : first we search for a Nash equilibrium where some vertex plays a pure strategy , then we search for a fully mixed Nash equilibrium , where all vertices play mixed strategies .For i \u2264 k let vi denote the probability that Vi plays 1 .The first search can be done as follows .For each i \u2208 1 , ... , k and each b \u2208 0 , 1 , do the following .For the second search , note that if Vi plays a mixed strategy , then vi +1 and vi_1 satisfy an equation of the form vi +1 = A0 + A1vi_1 / B0 + B1vi_1 .Since all vertices in the cycle play mixed strategies , we have vi +3 = A ' 0 + A ' 1vi +1 / B ' 0 + B ' 1vi +1 .Composing the two linear fractional transforms , we obtain vi +3 = A ' ' 0 + A ' ' 1 vi_1 / B ' ' 0 + B ' ' 1 vi_1 .for some new constants A ' ' 0 , A ' ' 1 , B ' ' 0 , B ' ' 1 .Choose any vertex Vi .We can express vi in terms of vi +2 , then vi +4 , vi +6 etc. and ultimately vi itself to obtain a quadratic equation for vi that is simple to derive from the payoffs in the game .If the equation is non-trivial it has at most 2 solutions in 0 , 1 .For an odd-length cycle all other vj 's are derivable from those solutions , and if a fully mixed Nash equilibrium exists , all the vj should turn out to be real numbers in the range 0 , 1 .For an even-length cycle , we obtain two quadratic equations , one for vi and another forvi +1 , and we can in the same way test whether any solutions to these yield values for the other vj , all of which lie in 0 , 1 .If the quadratic equation is trivial , there is potentially a continuum of fully-mixed equilibria .The values for vi that may occur in a Nash equilibrium are those for which all dependent vj values lie in 0 , 1 ; the latter condition is easy to check by computing the image of the interval 0 , 1 under respective fractional linear transforms .For arbitrary trees , the general structure of the algorithm remains the same , i.e. , one can construct a best response policy or , alternatively , a breakpoint policy for any vertex based on the best response policies of its children .We assume that the degree of each vertex is bounded by a constant K , i.e. , the payoff matrix for each vertex is of size O 2K .Consider a vertex V whose children are U1 , ... , Uk and whose parent is W ; the best response policy of each Uj is B V , Uj .Similarly to the previous section , we can compute V 's expected payoffs P0 and P1 from playing 0 or 1 , respectively .Namely , when each of the Uj plays uj and W plays w , we have P0 = L0 u1 , ... , uk , w , P1 = L1 u1 , ... , uk , w , where the functions L0 \u00b7 , ... , \u00b7 , L1 \u00b7 , ... , \u00b7 are linear in all of their arguments .Hence , the inequality P0 > P1 can be rewritten aswhere both A \u00b7 , ... , \u00b7 and B \u00b7 , ... , \u00b7 are linear in all of their arguments .Set ut = u1 , ... , uk and define the indifference function f : 0 , 1 k ~ \u2192 0 , 1 as f u = A i / B i ; clearly , if each Uj plays uj , W plays w and w = f u , V is indifferent between playing 0 and 1 .For any X = X1 \u00d7 \u00b7 \u00b7 \u00b7 \u00d7 Xk , where Xi \u2286 0 , 1 2 defineand \u02c6f 1 = w , 1 | \u2203 u s.t. ui \u2208 pbrUi 1 and wB u \u2264 A u .As in previous section , we can show that B W , V is equal toalso , any path from w = 0 to w = 1 that is a subset of B W , V constitutes a valid breakpoint policy .While the algorithm of Section 4 can be generalized for boundeddegree trees , its running time is no longer polynomial .In fact , the converse is true : we can construct a family of trees and payoff matrices for all players so that the best response policies for some of the players consist of an exponential number of segments .Moreover , in our example the breakpoint policies coincide with the best response policies , which means that even finding a single Nash equilibrium using the approach of 8 , 9 is going to take exponentially long time .In fact , a stronger statement is true : for any polynomial-time two-pass algorithm defined later that works with subsets of best response policies for this graph , we can choose the payoffs of the vertices so that the downstream pass of this algorithm will fail .In the rest of this subsection , we describe this construction .Consider the tree T. given by Figure 5 ; let V. be the root of this tree .For every k = 1 , ... , n , let the payoffs of Sk and Tk be the same as those for the U and V described in Section 3 ; recall that the breakpoint policies for U and V are shown in Figure 2 .It is not hard to see that the indifference function for Tk is given by f s = .8 s +.1 .The payoff of V0 is 1 if V1 selects the same action as V0 and 0 otherwise ; V0 's best response policy is given by Figure 6 .LEMMA 3 .Fix k < n , and let u , t , v , and w denote the strategies of Vk-1 , Tk , Vk , and Vk +1 , respectively .Suppose that Vk prefers playing 0 to playing 1 if and only if .5 t + .1 u + .2 > w .Then B Vk +1 , Vk consists of at least 3k segments .Moreover , v , w | v , w \u2208 B Vk +1 , Vk , 0 \u2264 w \u2264 .2 = 0 , .2 \u00d7 0 and v , w | v , w \u2208 B Vk +1 , Vk , .8 \u2264 w \u2264 1 = .8 , 1 \u00d7 1 .these sets correspond to horizontal segments of B Vk , Tk .It is easy to see that S1 , S2 , S3 \u2282 B Vk +1 , Vk .Since f is a continuous function , the number of segments in each Si is at least the number of segments in B Vk , Vk-1 \u2229 .1 , .9 \u00d7 0 , 1 , which is at least 3k-1 by induction hypothesis .Moreover , as f is monotone in u and f 1 , 0 < f 0 , .5 < f 1 , .5 < f 0 , 1 , all Si , i = 1 , 2 , 3 , are disjoint .Finally , the set B Vk +1 , Vk contains two segments that correspond to the vertical segments of B Vk , Tk , i.e. ,Clearly , S4 connects S2 and S3 , S5 connects S1 and S2 , and S4 and S5 do not intersect each other .We conclude that B Vk +1 , Vkis a continuous line that consist of at least 3k segments and satisfies the condition of the lemma .To complete the construction , we need to show that we can design the payoff matrix for Vk so that it prefers playing 0 to playing 1 if and only if .5 t + .1 u + .2 > w. To this end , we prove a more general statement , namely , that the indifference function of a vertex can be an arbitrary fractional multilinear function of its descendants ' strategies .We say that a function of k variables is multilinear if it can be represented as a sum of monomials and each of these monomials is linear in all of its variables .Note that this definition is different from a more standard one in that we do not require that all of the monomials have the same degree .Recall that the payoffs of a vertex with k + 1 neighbours are described by matrices P0 and P1 , where Pj i0i1 ... ik is the payoff that V gets when it plays j , and its neighbours play i0 , ... , ik , and j , i0 , ... , ik \u2208 0 , 1 .Let P j = P j w , u1 , ... , uk be the expected payoff obtained by this vertex when it plays j and the mixed strategies of its neighbours are given by a vector w , u1 , ... , uk , i.e. , P j = E Pji0i1 ... ik where i0 , ... , ik are independent Bernoulli random variables , each of which is 1 with the respective probabilities w , u1 , ... , uk .LEMMA 4 .Given a tree vertex V whose parent is Wand whose children are U1 , ... , Uk , for any function f = f u1 , ... , uk that can be represented as a ratio of two multilinear functions f1 , f2 ,The proof of this lemma is based on the fact that every monomial of the form as u0 s0 ... uk sk , s1 , ... , sk \u2208 0 , 1 , can be represented asfor some Ct , t \u2208 0 , 1 k +1 .The details can be found in the full version of this paper 6 .While the best response policy constructed in the previous subsection has exponential size , it is not clear a ` priori that it is necessary to keep track of all of its line segments rather than to focus on a small subset of these segments .However , it turns out that for two-pass algorithms such as the algorithm of 8 , the best response policy can not be simplified .More precisely , we say that an algorithm A is a two-pass algorithm ifA constructs a set BB W , V \u2286 B W , V .This set is produced from the sets BB V , U | U is a child of V by applying the procedure from the beginning of Section 6 substituting BB V , Uj for B V , Uj for all children Uj of V , and then possibly omitting some of the points of the resulting set which is then stored explicitly .\u2022 The downstream pass is identical to the downstream pass of 8 as described in Section 2 except that it operates on the sets BB W , V rather than on the sets B W , V .Theorem 7 demonstrates that any two-pass algorithm will fail during the downstream pass on Tn if there is an index j such that the set BB Vj +1 , Vj omits any interior point of any of the at least 3j segments of B Vj +1 , Vj .This implies Theorem 3 .THEOREM 7 .For any two-pass algorithm A for which there exists an index j , j \u2208 1 , n/4 , a segment S of B Vj , Vj_1 , and an interior point x , y of S such that BB Vj , Vj_1 does not contain x , y , we can choose payoff matrices of the vertices Vj , ... , Vn so that the downstream pass of A will fail , and , additionally , payoffs to V4j , ... , Vn are identically 0 .We sketch the proof of Theorem 7 ; the details can be found in the full version of this paper 6 .We proceed by induction .For j = 1 , the argument is similar to that in Section 3 .For the inductive step , the main idea is that we can `` zoom in '' on any part of a best response policy including the part that was omitted !by using an appropriate indifference function ; this allows us to reduce the case j = j0 to j = j0 \u2212 1 .In the previous section , we showed that for graphical games on trees that are almost but not quite paths , two-pass algorithms fail to find Nash equilibria in polynomial time .We next show that a milder path-like graph property allows us to construct graphical games for which it is unlikely that any polynomial-time algorithm will find Nash equilibria .A path decomposition of a graph G = V , E is a sequence of subset Si V \u2286 V such that for each edge v , v ' \u2208 E , v , v ' \u2208 Si V for some i , and furthermore , for each v \u2208 V , if v \u2208 Si V and v \u2208 Sj V for j > i , then v \u2208 Sk V for all i \u2264 k \u2264 j .The path decomposition has width k if all sets Si V have cardinality at most k + 1 .The pathwidth of G is the minimum width of any path decomposition of G.Pathwidth is a restriction of treewidth in which one would seek a tree whose vertices were the sets Si V , and the sets containing some vertex would have to form a subtree .For any constant k it can be decided in polynomial time whether a graph has pathwidth or treewidth k. Furthermore many graph-theoretic problems seem easier to solve in polynomial time , when restricted to fixed treewidth , or pathwidth , graphs , see 1 for an overview .Note that a path has pathwidth 1 and a cycle has pathwidth 2 .We review some basic definitions from the computational complexity theory of search problems .A search problem associates any input here , a graphical game with a set of solutions here , the Nash equilibria of the input game , where the description length of any solution should be polynomially bounded as a function of the description length of its input .In a total search problem , there is a guarantee that at least one solution exists for any input .Nash 's theorem assures us that the problem of finding Nash equilibria is total .A reduction from search problem S to problem S ' is a mechanism that shows that any polynomial-time algorithm for S ' implies a polynomial-time algorithm for S .It consists of functions f and g , computable in polynomial time , where f maps inputs of S to inputs of S ' , and g maps solutions of S ' to solutions of S , in such a way that if Is is an input to S , and Ss is a solution to f Is , then g Ss is a solution to Is .Observe that total search problems do not allow the above reductions from problems such as CIRCUIT SAT where the input is a boolean circuit , and solutions are input vectors that make the output true due to the fact that CIRCUIT SAT and other NP-complete problems have inputs with empty solution sets .Instead , recent work on the computational complexity of finding a Nash equilibrium 7 , 4 , 5 , 2 , 3 has related it to the following problem .Definition 4 .END OF THE LINE .Input : boolean circuits S and P , each having n input and n output bits , where P 0n = 0n and S 0n = ~ 0n .Solution : x \u2208 0 , 1 n such that S x = x , or alternatively x \u2208 0 , 1 n such that P S x = ~ x. S and P can be thought of as standing for `` successor '' and `` predecessor '' .Observe that by computing Si 0n for i = 0 , 1 , 2 , ... and comparing with P Si +1 0n , we must eventually find a solution to END OF THE LINE .END OF THE LINE characterizes the complexity class PPAD standing for parity argument on a graph , directed version , introduced in Papadimitriou 11 , and any search problem S is PPAD-complete if END OF THE LINE reduces to S .Other PPAD-complete problems include the search for a ham sandwich hyperplane , and finding market equilibria in an exchange economy see 11 for more detailed descriptions of these problems .3-GRAPHICAL NASH is the problem of finding a Nash equilibrium for a graphical game whose graph has degree 3 .Daskalakis et al. 4 show PPAD-completeness of 3-GRAPHICAL NASH by a reduction from 3-DIMENSIONAL BROUWER , introduced in 4 and defined as follows .Definition 5 .3-DIMENSIONAL BROUWER .Input : a circuit C having 3n input bits and 2 output bits .The input bits define a `` cubelet '' of the unit cube , consisting of the 3 coordinates of its points , given to n bits of precision .The output represents one of four colours assigned by C to a cubelet .C is restricted so as to assign colour 1 to cubelets adjacent to the y , z plane , colour 2 to remaining cubelets adjacent to the x , z plane , colour 3 to remaining cubelets on the x , y plane , and colour 0 to all other cubelets on the surface of the unit cube .A solution is a panchromatic vertex , a vertex adjacent to cubelets that have 4 distinct colours .The reason why a solution is guaranteed to exist , is that an associated Brouwer function 0 can be constructed , i.e. a continuous function from the unit cube to itself , such that panchromatic vertices correspond to fixpoints of 0 .Brouwer 's Fixpoint Theorem promises the existence of a fixpoint .The proof of Theorem 4 uses a modification of the reduction of 4 from 3-DIMENSIONAL BROUWER to 3-GRAPHICAL NASH .To prove the theorem , we begin with some preliminary results as follows .Each player has 2 actions , denoted 0 and 1 .For a player at vertex V let P V denote the probability that the player plays 1 .LEMMA 5 .7 There exists a graphical game 9shif t offixed size having vertices V , V ' where P V ' is the fractional part of 2P V .COROLLARY 1 .There exists a graphical game 9n-shift ofsize \u0398 n of constant pathwidth , having vertices V , Vn where P Vn is the fractional part of 2n .P V .PROOF .Make a chain of n copies of 9shift in Lemma 5 .Each subset of vertices in the path decomposition is the vertices in a copy of 9shif t. Let In x denote the n-th bit of the binary expansion of x , where we interpret 1 as true and 0 as false .The following uses gadgets from 7 , 4 .COROLLARY 2 .There exists k such that for all n , and for all n1 , n2 , n3 < n , there exists a graphical game of size O n with pathwidth k , having vertices V1 , V2 , V3 where P V3 = P V1 + 2-n3 In1 P V1 \u2227 In2 P V2 .PROOF OF THEOREM 4 .Let C be the boolean circuit describing an instance of 3-DIMENSIONAL BROUWER .Let g1 , ... , gp n be the gates of C indexed in such a way that the input s to any gate are the output s of lower-indexed gates .g1 , ... , g3n will be the 3n inputs to C. All players in the graphical game 9 constructed in 4 have 2 actions denoted 0 and 1 .The probability that V plays 1 is denoted P V .9 has 3 players Vx , Vy and Vz for which P Vx , P Vy and P Vz represent the coordinates of a point in the unit cube .9 is designed to incentivize Vx , Vy and Vz to adjust their probabilities in directions given by a Brouwer function which is itself specified by the circuit C .In a Nash equilibrium , P Vx , P Vy and P Vz represent coordinates of a fixpoint of a function that belongs to the class of functions represented by 3-DIMENSIONAL BROUWER .C using Corollary 2 .Let 9 i be the graphical game that does this .Let S1 9 i , ... , Sn 9 i be a length n path decomposition of 9 i , where VC i-1 \u2208 S1 9 i and V C i \u2208 Sn 9 i .Then , a path decomposition of \u222a 1 < i < p n 9 i is obtained by taking the union of the separate path decompositions , together with Sn 9 i-1 \u222a S1 9 i for 2 < i < p n .Let 9C be the above graphical game that simulates C. 9C has 3n inputs , consisting of the first n bits of the binary expansions of P Vx , P Vy and P Vz .Similarly to 4 , the output of 9C affects Vx , Vy and Vz as follows .Colour 0 incentivizes Vx , Vy and Vzto adjust their probabilities p Vx , p Vy and p Vz in the direction \u2212 1 , \u2212 1 , \u2212 1 ; colour 2 incentivizes them to move in direction 1 , 0 , 0 ; colour 2 , direction 0 , 1 , 0 ; colour 3 , direction 0 , 0 , 1 .We need to ensure that at points at the boundaries of adjacent cubelets , the change of direction will be approximately the average of directions of surrounding points .That way , all four colors/directions must be nearby so that they can cancel each other out and we are at a panchromatic vertex .This is achieved using the same trick as 4 , in which we make a constant number M of copies of GC , which differ in that each copy adds a tiny displacement vector to its copies of p Vx , p Vy and p Vz which are derived from the original using the addition gadget of 7 .Using the addition and multiplication gadgets of 7 we average the directions and add a small multiple of this average to p Vx , p Vy , p Vz .At a Nash equilibrium the outputs of each copy will cancel each other out .The pathwidth of the whole game is at most M times the pathwidth GC .", "conclusions": "The most important problem left open by this paper is whether it is possible to find a Nash equilibrium of a graphical game on a bounded-degree tree in polynomial time .Our construction shows that any two-pass algorithm that explicitly stores breakpoint policies needs exponential time and space .However , it does not preclude the existence of an algorithm that is based on a similar idea , but , instead of computing the entire breakpoint policy for each vertex , uses a small number of additional passes through the graph to decide which polynomial-sized parts of each breakpoint policy should be computed .In particular , such an algorithm may be based on the approximation algorithm of 8 , where the value of e is chosen adaptively .Another intriguing question is related to the fact that the graph for which we constructed an exponential-sized breakpoint policy has pathwidth 2 , while our positive results are for a path , i.e. , a graph of pathwidth 1 .It is not clear if for any bounded-degree graph of pathwidth 1 the running time of the breakpoint policybased version of our algorithm will be polynomial .In particular , it is instructive to consider a `` caterpillar '' graph , i.e. , the graph that can be obtained from Tn by deleting the vertices S1 , ... , Sn .For this graph , the best response policy of a vertex Vk in the `` spine '' of the caterpillar is obtained by combining the best response policy of its predecessor on the spine Vk \u2212 1 and its other child Tk ; since the latter is a leaf , its best response policy is either trivial i.e. , 0 , 1 2 , 0 , 1 \u00d7 0 , or 0 , 1 \u00d7 1 or consists of two horizontal segments and one vertical segment of the form \u03b1 \u00d7 0 , 1 that connects them .Assuming for convenience that B Vk , Tk = 0 , \u03b1 \u00d7 0 \u222a \u03b1 \u00d7 0 , 1 \u222a \u03b1 , 1 \u00d7 1 , and f is the indifference function for Vk , we observe that the best response policy for Vk consists of 5 components : \u02c6f 0 , f\u02c6 1 , and three components that correspond to 0 , \u03b1 \u00d7 0 , \u03b1 \u00d7 0 , 1 , and \u03b1 , 1 \u00d7 1 .Hence , one can think of constructing B Vk +1 , Vk as the following process : turn B Vk , Vk \u2212 1 by \u03c0 / 2 , cut it along the now horizontal line vk = \u03b1 , apply a fractional linear transform to the horizontal coordinate of both parts , and reconnect them using the image of the segment \u03b1 \u00d7 0 , 1 under f .This implies that the problem of bounding the size of the best response policy or , alternatively , the breakpoint policy , can be viewed as a generalization of the following computational geometry problem , which we believe may be of independent interest : PROBLEM 1 .Given a collection of axis-parallel segments in R2 , consider the following operation : pick an axis-parallel line li either vertical or horizontal , cut the plane along this line , and shift one of the resulting two parts by an arbitrary amount \u03b4i ; as a result , some segments will be split into two parts .Reconnect these parts , i.e. , for each segment of the form a , b \u00d7 c that was transformed into a , t \u00d7 c + \u03b4i and t , b \u00d7 c , introduce a segment t \u00d7 c , c + \u03b4i .Is itpossible to start with the segment 0 , 1 and after n operations obtain a set that can not be represented as a union of poly n line segments ?Ifyes , can it be the case that in this set , there is no path with a polynomial number of turns that connects the endpoints of the original segment ?It turns out that in general , the answer to the first question is positive , i.e. , after n steps , it is possible to obtain a set that consists of \u0398 cn segments for some c > 0 .This implies that even for a caterpillar , the best response policy can be exponentially large .However , in our example which is omitted from this version of the paper due to space constraints , there exists a polynomial-size path through the best response policy , i.e. , it does not prove that the breakpoint policy is necessarily exponential in size .If one can prove that this is always the case , it may be possible to adapt this proof to show that there can be an exponential gap between the sizes of best response policies and breakpoint policies .", "author_keywords_stem": ["graphic game", "nash equilibrium", "ppad-complet"]}