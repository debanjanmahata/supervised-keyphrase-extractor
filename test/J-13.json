{"abstract": "The winner determination problem in combinatorial auctions is the problem of determining the allocation of the items among the bidders that maximizes the sum of the accepted bid prices .While this problem is in general NPhard , it is known to be feasible in polynomial time on those instances whose associated item graphs have bounded treewidth called structured item graphs .Formally , an item graph is a graph whose nodes are in one-to-one correspondence with items , and edges are such that for any bid , the items occurring in it induce a connected subgraph .Note that many item graphs might be associated with a given combinatorial auction , depending on the edges selected for guaranteeing the connectedness .In fact , the tractability of determining whether a structured item graph of a fixed treewidth exists and if so , computing one was left as a crucial open problem .In this paper , we solve this problem by proving that the existence of a structured item graph is computationally intractable , even for treewidth 3 .Motivated by this bad news , we investigate different kinds of structural requirements that can be used to isolate tractable classes of combinatorial auctions .We show that the notion of hypertree decomposition , a recently introduced measure of hypergraph cyclicity , turns out to be most useful here .Indeed , we show that the winner determination problem is solvable in polynomial time on instances whose bidder interactions can be represented with dual hypergraphs having bounded hypertree width .Even more surprisingly , we show that the class of tractable instances identified by means of our approach properly contains the class of instances having a structured item graph .", "id": "J-13", "reader_keywords_stem": ["hypergraph", "combinatori auction", "hypertre decomposit", "well-known mechan for resourc and task alloc", "hypertre-base decomposit method", "hypergraph hg", "complex of structur item graph", "structur item graph complex", "simplif of the primal graph", "primal graph simplif", "structur item graph", "fix treewidth", "accept bid price", "polynomi time"], "combined_keywords_stem": ["hypergraph", "combinatori auction", "hypertre decomposit", "well-known mechan for resourc and task alloc", "hypertre-base decomposit method", "hypergraph hg", "complex of structur item graph", "structur item graph complex", "simplif of the primal graph", "primal graph simplif", "structur item graph", "fix treewidth", "accept bid price", "polynomi time"], "introduction": "Combinatorial auctions .Combinatorial auctions are well-known mechanisms for resource and task allocation where bidders are allowed to simultaneously bid on combinations of items .This is desirable when a bidder 's valuation of a bundle of items is not equal to the sum of her valuations of the individual items .This framework is currently used to regulate agents ' interactions in several application domains cf. , e.g. , 21 such as , electricity markets 13 , bandwidth auctions 14 , and transportation exchanges 18 .Formally , a combinatorial auction is a pair Z , B , where Z = I1 , ... , Im is the set of items the auctioneer has to sell , and B = B1 , ... , Bn is the set of bids from the buyers interested in the items in Z. Each bid Bi has the form item Bi , pay Bi , where pay Bi is a rational number denoting the price a buyer offers for the items in item Bi C Z .An outcome for Z , B is a subset b of B such that item Bi n item Bj = 0 , for each pair Bi and Bj of bids in b with i = ~ j .The winner determination problem .A crucial problem for combinatorial auctions is to determine the outcome b \u2217 that maximizes the sum of the accepted bid prices i.e. ,Bi \u2208 b \u2217 pay Bi over all the possible outcomes .This problem , called winner determination problem e.g. , 11 , is known to be intractable , actually NP-hard 17 , and even not approximable in polynomial time unless NP = ZPP 19 .Hence , it comes with no surprise that several efforts have been spent to design practically efficient algorithms for general auctions e.g. , 20 , 5 , 2 , 8 , 23 and to identify classes of instances where solving the winner determination problem is feasible in polynomial time e.g. , 15 , 22 , 12 , 21 .In fact , constraining bidder interaction was proven to be useful for identifying classes of tractable combinatorial auctions .Item graphs .Currently , the most general class of tractable combinatorial auctions has been singled out by modelling interactions among bidders with the notion of item graph , which is a graph whose nodes are in one-to-one correspondence with items , and edges are such that for anybid , the items occurring in it induce a connected subgraph .Indeed , the winner determination problem was proven to be solvable in polynomial time if interactions among bidders can be represented by means of a structured item graph , i.e. , a tree or , more generally , a graph having tree-like structure 3 formally bounded treewidth 16 .To have some intuition on how item graphs can be built , we notice that bidder interaction in a combinatorial auction ~ I , B ~ can be represented by means of a hypergraph H T , g such that its set of nodes N H T , g coincides with set of items I , and where its edges E H T , g are precisely the bids of the buyers item Bi | Bi \u2208 B .A special item graph for ~ I , B ~ is the primal graph of H T , g , denoted by G H T , g , which contains an edge between any pair of nodes in some hyperedge of H T , g .Then , any item graph for H T , g can be viewed as a simplification of G H T , g obtained by deleting some edges , yet preserving the connectivity condition on the nodes included in each hyperedge .EXAMPLE 1 .The hypergraph H To , go reported in Figure 1 .a is an encoding for a combinatorial auction ~ I0 , B0 ~ , where I0 = I1 , ... , I5 , and item Bi = hi , for each 1 \u2264 i \u2264 3 .The primal graph for H To , go is reported inthe connectivity for h1 are depicted in bold .<graphs efficiently .The above mentioned tractability result on structured item graphs turns out to be useful in practice only when a structured item graph either is given or can be efficiently determined .However , exponentially many item graphs might be associated with a combinatorial auction , and it is not clear how to determine whether a structured item graph of a certain constant treewidth exists , and if so , how to compute such a structured item graph efficiently .Polynomial time algorithms to find the `` best '' simplification of the primal graph were so far only known for the cases where the item graph to be constructed is a line 10 , a cycle 4 , or a tree 3 , but it was an important open problem cf. 3 whether it is tractable to check if for a combinatorial auction , an item graph of treewidth bounded by a fixed natural number k exists and can be constructed in polynomial time , if so .Weighted Set Packing .Let us note that the hypergraph representation H T , g of a combinatorial auction ~ I , B ~ is also useful to make the analogy between the winner determination problem and the maximum weighted-set packing problem on hypergraphs clear e.g. , 17 .Formally , a packing h for a hypergraph H is a set of hyperedges of H such that for each pair h , h ' \u2208 h with h = ~ h ' , it holds that h \u2229 h ' = \u2205 .Letting w be a weighting function for H , i.e. , a polynomially-time computable function from E H to rational numbers , the weight of a packing h is the rational number w h = EhCh w h , where w = 0 .Then , the maximum-weighted set packing problem for H w.r.t. w , denoted by MaxWSP H , w , is the problem of finding a packing for H having the maximum weight over all the packings for H. To see that MaxWSP is just a different formulation for the winner determination problem , given a combinatorial auction ~ I , B ~ , it is sufficient to define the weighting function w T , g item Bi = pay Bi .Then , the set of the solutions for the weighted set packing problem for H T , g w.r.t. w T , g coincides with the set of the solutions for the winner determination problem on ~ I , B ~ .EXAMPLE 2 .Consider again the hypergraph H To , go reported in Figure 1 .a .An example packing for H To , go is h = h1 , which intuitively corresponds to an outcome for ~ I0 , B0 ~ , where the auctioneer accepted the bid B1 .By assuming that bids B1 , B2 , and B3 are such that pay B1 = pay B2 = pay B3 , the packing h is not a solution for the problem MaxWSP H To , go , w To , go .Indeed , the packingThe primary aim of this paper is to identify large tractable classes for the winner determination problem , that are , moreover polynomially recognizable .Towards this aim , we first study structured item graphs and solve the open problem in 3 .The result is very bad news : \u25ba It is NP complete to check whether a combinatorial auction has a structured item graph of treewidth 3 .More formally , letting C ig , k denote the class of all the hypergraphs having an item tree of treewidth bounded by k , we prove that deciding whether a hypergraph associated with a combinatorial auction problem belongs to C ig , 3 is NP-complete .In the light of this result , it was crucial to assess whether there are some other kinds of structural requirement that can be checked in polynomial time and that can still be used to isolate tractable classes of the maximum weightedset packing problem or , equivalently , the winner determination problem .Our investigations , this time , led to very good news which are summarized below :E H is in E .We show that MaxWSP is tractable on the class of those instances whose dual hypergraphs have hypertree width 7 bounded by k short : class C hw , k of hypergraphs .Note that a key issue of the tractability is to consider the hypertree width of the dual hypergraph H \u00af instead of the auction hypergraph H .In fact , we can show that MaxWSP remains NP-hard even when H is acyclic i.e. , when it has hypertree width 1 , even when each node is contained in 3 hyperedges at most .\u25ba The proof of the above results give us some interesting insight into the notion of structured item graph .Indeed , we show that structured item graphs are in one-to-one correspondence with some special kinds of hypertree decomposition of the dual hypergraph , which we call strict hypertree decompositions .A game-characterization for the notion of strict hypertree width is also proposed , which specializes the Robber and Marshals game in 6 proposed to characterize the hypertree width , and which makes it clear the further requirements on hypertree decompositions .The rest of the paper is organized as follows .Section 2 discusses the intractability of structured item graphs .Section 3 presents the polynomial-time algorithm for solving MaxWSP on the class of those instances whose dual hypergraphs have bounded hypertree width , and discusses the cases where the algorithm is also highly parallelizable .The comparison between the classes C ig , k and C hw , k is discussed in Section 4 .Finally , in Section 5 we draw our conclusions by also outlining directions for further research .", "title": "On The Complexity of Combinatorial Auctions : Structured Item Graphs and Hypertree Decompositions", "method": "Let H be a hypergraph .A graph G = V , E is an item graph for H if V = N H and , for each h \u2208 E H , the subgraph of G induced over the nodes in h is connected .An important class of item graphs is that of structured item graphs , i.e. , of those item graphs having bounded treewidth as formalized below .A tree decomposition 16 of a graph G = V , E is a pair T , \u03c7 , where T = N , F is a tree , and \u03c7 is a labelling function assigning to each vertex p \u2208 N a set of vertices \u03c7 p C _ V , such that the following conditions are satisfied : 1 for each vertex b of G , there exists p \u2208 N such that b \u2208 \u03c7 p ; 2 for each edge b , d \u2208 E , there exists p \u2208 N such that b , d C _ \u03c7 p ; 3 for each vertex b of G , the set p \u2208 N | b \u2208 \u03c7 p induces a connected subtree of T .The width of T , \u03c7 is the number maxpEN | \u03c7 p \u2212 1 | .The treewidth of G , denoted by tw G , is the minimum width over all its tree decompositions .The winner determination problem can be solved in polynomial time on item graphs having bounded treewidth 3 .THEOREM 1 CF. 3 .Assume a k-width tree decomposition T , \u03c7 of an item graph for H is given .Then , MaxWSP H , w can be solved in time O | T | 2 \u00d7 | E H | +1 k +1 .Many item graphs can be associated with a hypergraph .As an example , observe that the item graph in Figure 1 .c has treewidth 1 , while Figure 1 .d reports an item graph whose treewidth is 2 .Indeed , it was an open question whether for a given constant k it can be checked in polynomial time if an item graph of treewidth k exists , and if so , whether such an item graph can be efficiently computed .Let C ig , k denote the class of all the hypergraphs having an item graph G such that tw G < k .The main result of this section is to show that the class C ig , k is hard to recognize .The proof of this result relies on an elaborate reduction from the Hamiltonian path problem HP s , t of deciding whether there is an Hamiltonian path from a node s to a node t in a directed graph G = N , E .To help the intuition , we report here a high-level overview of the main ingredients exploited in the proof1 .The general idea it to build a hypergraph HG such that there is an item graph G ' for HG with tw G ' < 3 if and only if HP s , t over G has a solution .First , we discuss the way HG is constructed .See Figure 2 .a for an illustration , where the graph G consists of the nodes s , x , y , and t , and the set of its edges is e1 = s , x , e2 = x , y , e3 = x , t , e4 = y , t .From G to HG .Let G = N , E be a directed graph .Then , the set of the nodes in HG is such that : for each x \u2208 N , N HG contains the nodes bsx , btx , b ' x , b ' ' x , bdx ; for each e = x , y \u2208 E , N HG contains the nodes ns ' x , ns ' ' x , nt ' y , nt ' ' y , nsex and ntey .No other node is in N HG .Hyperedges in HG are of three kinds :Notice that each of the above hyperedges but those of the form Sx and Tx contains exactly two nodes .As an example of the hyperedges of kind 1 and 2 , the reader may refer to the example construction reported in Figure 2 .a , and notice , for instance , that Sx = bsx , nse2 x , nse33 finally , we denote by DG the set containing the hyperedges in E HG of the third kind .In the reduction we are exploiting , DG can be an arbitrary set of hyperedges satisfying the four conditions that are discussed below .Let PG be the set of the following | PG | \u2264 | N | + 3 \u00d7 | E | pairs : PG = b ' x , b ' ' x | x \u2208 N \u222a ns ' x , ns ' ' x , nt ' y , nt ' ' y , nsex , nte y | e = x , y \u2208 E .Also , let I v denote the set h \u2208 E H | v \u2208 h of the hyperedges of H that are touched by v ; and , for a set V \u2286 N H , let I V = UvcV I v .Then , DG has to be a set such that :of PG cf. c1 and c2 .Moreover , hyperedges in DG touch only vertices included in at least a pair of PG cf. c3 ; and , any triple of nodes is not capable of touching all the elements of DG if none of the pairs that can be built from it belongs to PG cf. c4 .The reader may now ask whether a set DG exists at all satisfying c1 , c2 , c3 and c4 .In the following lemma , we positively answer this question and refer the reader to its proof for an example construction .LEMMA 1 .A set DG , with | DG | = 2 \u00d7 | PG | + 2 , satisfying conditions c1 , c2 , c3 , and c4 can be built in time O | PG | 2 .Key Ingredients .We are now in the position of presenting an overview of the key ingredients of the proof .Let G ' be an arbitrary item graph for HG , and let TD = ~ T , \u03c7 ~ be a 3-width tree decomposition of G ' note that , because of the cliques , e.g. , on the nodes bsx , b ' x , b ' ' x , bdx , any item graph for HG has treewidth 3 at least .There are three basic observations serving the purpose of proving the correctness of the reduction .`` Blocks '' of TD : First , we observe that TD must contain some special kinds of vertex .Specifically , for each node x \u2208 N , TD contains a vertex bs x such thatIntuitively , these vertices are required to cover the cliques of HG associated with the hyperedges of kind 1 and 2 .Each of these vertices plays a specific role in the reduction .Indeed , each directed edge e = x , y \u2208 E is encoded in TD by means of the vertices : ns x , e , representing precisely that e starts from x ; and , nt y , e , representing precisely that e terminates into y. Also , each node x \u2208 N is encoded in TD be means of the vertices : bs x , representing the starting point of edges originating from x ; and , bt x , representing the terminating point of edges ending into x .As an example , Figure 2 .b reports the `` skeleton '' of a tree decomposition TD .The reader may notice in it the blocks defined above and how they are related with the hypergraph HG in Figure 2 .a other blocks in it of the form w x , y are defined next .and uniqueness of the connections : The second crucial observation is that in the path connecting a vertex of the form bs x resp. , bt y with a vertex of the form ns x , e resp. , nt y , e there is one special vertex of the form w x , y such that : \u03c7 w x , y \u2287 nseix , ntei y , for some edge e ' = x , y \u2208 E. Guaranteeing the existence of one such vertex is precisely the role played by the hyperedges in DG .The arguments for the proof are as follows .First , we observe that I \u03c7 bs x \u2229 I \u03c7 ns x , e \u2287 DG \u222a Sx and I \u03c7 bt y \u2229 I \u03c7 nt y , e \u2287 DG \u222a Ty .Then , we show a property stating that for a pair of consecutive vertices p and q in the path connecting bs x and ns x , e resp. , bt y and nt y , e , I \u03c7 p \u2229 \u03c7 q \u2287 I \u03c7 bs x \u2229 I \u03c7 ns x , e resp. , I \u03c7 p \u2229 \u03c7 q \u2287Based on this observation , and by exploiting the properties of the hyperedges in DG , it is not difficult to show that any pair of consecutive vertices p and q must share two nodes of HG forming a pair in PG , and must both touch Sx resp. , Ty .When the treewidth of G ' is 3 , we can conclude that a vertex , say w x , y , in this path is such that \u03c7 w x , y \u2287 nseix , ntei y , for some edge e ' = x , y \u2208 E to this end , note that \u2208 Ty , and I \u03c7 w x , y \u2287 DG .In particular , w x , y is the only kind of vertex satisfying these conditions , i.e. , in the path there is no further vertex of the form w x , z , for z = ~ y resp. , w z , y , for z = ~ x .To help the intuition , we observe that having a vertex of the form w x , y in TD corresponds to the selection of an edge from node x to node y in the Hamiltonian path .In fact , given the uniqueness of these vertices selected for ensuring the connectivity , a one-to-one correspondence can be established between the existence of a Hamiltonian path for G and the vertices of the form w x , y .As an example , in Figure 2 .b , the vertices of the form w s , x , w x , y , and w y , t are in TD , and GTD shows the corresponding Hamiltonian path .Unused blocks : Finally , the third ingredient of the proof is the observation that if a vertex of the form w x , y , for an edge e ' = x , y \u2208 E is not in TD i.e. , if the edge x , y does not belong to the Hamiltonian path , then the corresponding block ns x , ei resp. , nt y , ei can be arbitrarily appended in the subtree rooted at the block ns x , e resp. , nt y , e , where e is the edge of the form e = x , z resp. , e = z , y such that w x , z resp. , w z , y is in TD .E.g. , Figure 2 .a shows w x , t , which is not used in TD , and Figure 2 .b shows how the blocks ns x , e3 and nt t , e3 can be arranged in TD for ensuring the connectedness condition .Since constructing structured item graphs is intractable , it is relevant to assess whether other structural restrictions can be used to single out classes of tractable MaxWSP instances .To this end , we focus on the notion of hypertree decomposition 7 , which is a natural generalization of hypergraph acyclicity and which has been profitably used in other domains , e.g , constraint satisfaction and database query evaluation , to identify tractability islands for NP-hard problems .A hypertree for a hypergraph H is a triple ~ T , \u03c7 , \u03bb ~ , where T = N , E is a rooted tree , and \u03c7 and \u03bb are labelling functions which associate each vertex p \u2208 N with two sets \u03c7 p \u2286 N H and \u03bb p \u2286 E H .If T ' = N ' , E ' is a subtree of T , we define \u03c7 T ' = UvCNi \u03c7 v .We denote the set of vertices N of T by vertices T .Moreover , for any p \u2208 N , Tp denotes the subtree of T rooted at p.A hypergraph H is acyclic if hw H = 1 .\u2737 EXAMPLE 3 .The hypergraph H ~ I0 , B0 ~ reported in Figure 1 .a is an example acyclic hypergraph .Instead , both the hypergraphs H1 and \u00af H1 shown in Figure 3 .a and Figure 3 .b , respectively , are not acyclic since their hypertree width is 2 .A 2-width hypertree decomposition for \u00af H1 is reported in Figure 3 .c .In particular , observe that H1 has been obtained by adding the two hyperedges h4 and h5 to H ~ I0 , B0 ~ to model , for instance , that two new bids , B4 and B5 , respectively , have been proposed to the auctioneer .\u2701 In the following , rather than working on the hypergraph H associated with a MaxWSP problem , we shall deal with its dual \u00af H , i.e. , with the hypergraph such that its nodes are in one-to-one correspondence with the hyperedges of H , and where for each node x \u2208 N H , h | x \u2208 h \u2227 h \u2208 E H is in E \u00af H .As an example , the reader may want to check again the hypergraph H1 in Figure 3 .a and notice that the hypergraph in Figure 3 .b is in fact its dual .The rationale for this choice is that issuing restrictions on the original hypergraph is a guarantee for the tractability only in very simple scenarios .For a fixed constant k , let C hw , k denote the class of all the hypergraphs whose dual hypergraphs have hypertree width bounded by k .The maximum weighted-set packing problem can be solved in polynomial time on the class C hw , k by means of the algorithm ComputeSetPackingk , shown in Figure 4 .The algorithm receives in input a hypergraph H , a weighting function w , and a k-width hypertree decomposition HD = T = N , E , \u03c7 , \u03bb of \u00af H. For each vertex v \u2208 N , let Hv be the hypergraph whose set of nodes N Hv C _ N H coincides with \u03bb v , and whose set of edges E Hv C _ E H coincides with \u03c7 v .In an initialization step , the algorithm equips each vertex v with all the possible packings for Hv , which are stored in the set Hv .Note that the size of Hv is bounded by | E H | + 1 k , since each node in \u03bb v is either left uncovered in a packing or is covered with precisely one of the hyperedges in \u03c7 v C _ E H .Then , ComputeSetPackingk is designed to filter these packings by retaining only those that `` conform '' with some packing for Hc , for each children c of v in T , as formalized next .Let hv and hc be two packings for Hv and Hc , respectively .We say that hv conforms with hc , denoted by hv \u2248 hc if : for each h \u2208 hc \u2229 E Hv , h is in hv ; and , for each h \u2208 E Hc \u2212 hc , h is not in hv .EXAMPLE 4 .Consider again the hypertree decomposition of \u00af H1 reported in Figure 3 .c .Then , the set of all the possible packings which are build in the initialization step of ComputeSetPackingk , for each of its vertices , is reMoreover , an arrow from a packing hc to hv denotes that hv conforms with hc .For instance , the reader may check that the packing h3 \u2208 Hv1 conforms with the packing h2 , h3 \u2208 Hv3 , but do not conform with h1 \u2208 Hv3 .\u2701 ComputeSetPackingk builds a solution by traversing T in two phases .In the first phase , vertices of T are processed from the leaves to the root r , by means of the procedure BottomUp .For each node v being processed , the set Hv is preliminary updated by removing all the packings hv that do not conform with any packing for some of the children of v .After this filtering is performed , the weight $ hv is updated .Intuitively , $ vhv stores the weight of the best partial packing for H computed by using only the hyperedges occurring in \u03c7 Tv .Indeed , if v is a leaf , then $ vhv = w hv .Otherwise , for each child c of v in T , $ vhv is updated with the maximum of $ c hc \u2212 w hc \u2229 hv over all the packings hc that conforms with hv resolving ties arbitrarily .The packing \u00af hc for which this maximum is achieved is stored in the variable hhv , c .In the second phase , the tree T is processed starting from the root .Firstly , the packing h \u2217 is selected that maximizes the weight equipped with the packings in Hr .Then , procedure TopDown is used to extend h \u2217 to all the other partial packings for vertices of T .In particular , at each vertex v , h \u2217 is extended with the packing hhv , c , for each child c of v. EXAMPLE 5 .Assume that , in our running example , w h1 = w h2 = w h3 = w h4 = 1 .Then , an execution of ComputeSetPackingk is graphically depicted in Figure 5 .b , where an arrow from a packing hc to a packing hv is used to denote that hc = hhv , c. Specifically , the choices made during the computation are such that the packing h2 , h3 is computed .In particular , during the bottom-up phase , we have that :and we set $ v1instance , note that $ v1 h5 = 2 since h5 conforms with the packing h4 of Hv2 such that $ v2 h4 = 1 .Then , at the beginning of the top-down phase , ComputeSetPackingk selects h3 as a packing for Hv1 and propagates this choice in the tree .Equivalently , the algorithm may have chosen h5 .As a further example , the way the solution h1 is obtained by the algorithm when w h1 = 5 and w h2 = w h3 = w h4 = 1 is reported in Figure 5 .c .Notice that , this time , in the top-down phase , ComputeSetPackingk starts selecting h1 as the best packing for Hv1 .\u2701 THEOREM 4 .Let H be a hypergraph and w be a weighting function for it .Let HD = T , \u03c7 , \u03bb be a complete k-width hypertree decomposition of \u00af H. Then , ComputeSetPackingk on input H , w , and HD correctly outputs a solution for MaxWSP H , w in time O | T | \u00d7 | E H | + 1 2k .PROOF .Sketch We observe that h \u2217 computed by ComputeSetPackingk is a packing for H. Indeed , consider a pair of hyperedges h1 and h2 in h \u2217 , and assume , for the sake of contradiction , that h1 \u2229 h2 = ~ \u2205 .Let v1 resp. , v2 be an arbitrary vertex of T , for which ComputeSetPackingk included h1 resp. , h2 in h \u2217 in the bottom-down computation .By construction , we have h1 \u2208 \u03c7 v1 and h2 \u2208 \u03c7 v2 .Let I be an element in h1 \u2229 h2 .In the dual hypergraph H , I is a hyperedge in E \u00af H which covers both the nodes h1 and h2 .Hence , by condition 1 in Definition 1 , there is a vertex v \u2208 vertices T such that h1 , h2 \u2286 \u03c7 v .Note that , because of the connectedness condition in Definition 1 , we can also assume , w.l.o.g. , that v is in the path connecting v1 and v2 in T. Let hv \u2208 Hv denote the element added by ComputeSetPackingk into h \u2217 during the bottom-down phase .Since the elements in Hv are packings for Hv , it is the case that either h1 \u2208 hv or h2 \u2208 hv .Assume , w.l.o.g. , that h1 \u2208 ~ hv , and notice that each vertex w in T in the path connecting v to v1 is such that h1 \u2208 \u03c7 w , because of the connectedness condition .Hence , because of definition of conformance , the packing hw selected by ComputeSetPackingk to be added at vertex w in h \u2217 must be such that h1 \u2208 ~ hw .This holds in particular for w = v1 .Contradiction with the definition of v1 .Therefore , h \u2217 is a packing for H .It remains then to show that it has the maximum weight over all the packings for H. To this aim , we can use structural induction on T to prove that , in the bottom-up phase , the variable $ vhv is updated to contain the weight of the packing on the edges in \u03c7 Tv , which contains hv and which has the maximum weight over all such packings for the edges in \u03c7 Tv .Then , the result follows , since in the top-down phase , the packing hr giving the maximum weight over \u03c7 Tr = E H is first included in h \u2217 , and then extended at each node c with the packing hhv , c conformingly with hv and such that the maximum value of ~ vhv is achieved .As for the complexity , observe that the initialization step requires the construction of the set Hv , for each vertex v , and each set has size | E H | + 1 k at most .Then , the function BottomUp checks for the conformance between strategies in Hv with strategies in Hc , for each pair v , c \u2208 E , and updates the weight rhv .These tasks can be carried out in time O | E H | + 1 2k and must be repeated for each edge in T , i.e. , O | T | times .Finally , the function TopDown can be implemented in linear time in the size of T , since it just requires updating h \u2217 by accessing the variable hhv , c .The above result shows that if a hypertree decomposition of width k is given , the MaxWSP problem can be efficiently solved .Moreover , differently from the case of structured item graphs , it is well known that deciding the existence of a k-bounded hypertree decomposition and computing one if any are problems which can be efficiently solved in polynomial time 7 .Therefore , Theorem 4 witnesses that the class C hw , k actually constitutes a tractable class for the winner determination problem .As the following theorem shows , for large subclasses that depend only on how the weight function is specified , MaxWSP H , w is even highly parallelizeable .Let us call a weighting function smooth if it is logspace computable and if all weights are polynomial and thus just require O log n bits for their representation .Recall that LOGCFL is a parallel complexity class contained in NC2 , cf. 9 .The functional version of LOGCFL is LLOGCFL , which is obtained by equipping a logspace transducer with an oracle in LOGCFL .THEOREM 5 .Let H be a hypergraph in C hw , k , and let w be a smooth weighting function for it .Then , MaxWSP H , w is in LLOGCFL .Given that the class C hw , k has been shown to be an island of tractability for the winner determination problem , and given that the class C ig , k has been shown not to be efficiently recognizable , one may be inclined to think that there are instances having unbounded hypertree width , but admitting an item graph of bounded tree width so that the intractability of structured item graphs would lie in their generality .Surprisingly , we establish this is not the case .The line of the proof is to first show that structured item graphs are in one-to-one correspondence with a special kind of hypertree decompositions of the dual hypergraph , which we shall call strict .Then , the result will follow by proving that k-width strict hypertree decompositions are less powerful than kwith hypertree decompositions .Let H be a hypergraph , and let V \u2286 N H be a set of nodes and X , Y \u2208 N H .X is V adjacent to Y if there exists an edge h \u2208 E H such that X , Y \u2286 h \u2212 V .A V path \u03c0 from X to Y is a sequence X = X0 , ... , X cents = Y of variables such that : Xi is V adjacent to Xi +1 , for each i \u2208 0...2-1 .A set W \u2286 N H of nodes is V connected if \u2200 X , Y \u2208 W there is a V path from X to Y .A V component is a maximal V connected non-empty set of nodes W \u2286 N H \u2212 V .For any V component C , let E C = h \u2208 E H | h \u2229 C = ~ \u2205 .The strict hypertree width shw H of H is the minimum width over all its strict hypertree decompositions .\u2737 The basic relationship between nice hypertree decompositions and structured item graphs is shown in the following theorem .Note that , as far as the maximum weighted-set packing problem is concerned , given a hypergraph H , we can always assume that for each node v \u2208 N H , v is in E H .In fact , if this hyperedge is not in the hypergraph , then it can be added without loss of generality , by setting w v = 0 .Therefore , letting C shw , k denote the class of all the hypergraphs whose dual hypergraphs associated with maximum 2The term `` +1 '' only plays the technical role of taking care of the different definition of width for tree decompositions and hypertree decompositions .weighted-set packing problems have strict hypertree width bounded by k , we have that C shw , k + 1 = C ig , k .By definition , strict hypertree decompositions are special hypertree decompositions .In fact , we are able to show that the additional conditions in Definition 2 induce an actual restriction on the decomposition power .THEOREM 7 .C ig , k = C shw , k + 1 \u2282 C hw , k + 1 .A Game Theoretic View .We shed further lights on strict hypertree decompositions by discussing an interesting characterization based on the strict Robber and Marshals Game , defined by adapting the Robber and Marshals game defined in 6 , which characterizes hypertree width .The game is played on a hypergraph H by a robber against k marshals which act in coordination .Marshals move on the hyperedges of H , while the robber moves on nodes of H .The robber sees where the marshals intend to move , and reacts by moving to another node which is connected with its current position and through a path in G H which does not use any node contained in a hyperedge that is occupied by the marshals before and after their move we say that these hyperedges are blocked .Note that in the basic game defined in 6 , the robber is not allowed to move on vertices that are occupied by the marshals before and after their move , even if they do not belong to blocked hyperedges .Importantly , marshals are required to play monotonically , i.e. , they can not occupy an edge that was previously occupied in the game , and which is currently not .The marshals win the game if they capture the robber , by occupying an edge covering a node where the robber is .Otherwise , the robber wins .THEOREM 8 .Let H be a hypergraph such that for each node v \u2208 N H , v is in E H .Then , H \u00af has a k-width strict hypertree decomposition if and only if k marshals can win the strict Robber and Marshals Game on \u00af H , no matter of the robber 's moves .", "conclusions": "We have solved the open question of determining the complexity of computing a structured item graph associated with a combinatorial auction scenario .The result is bad news , since it turned out that it is NP-complete to check whether a combinatorial auction has a structured item graph , even for treewidth 3 .Motivated by this result , we investigated the use of hypertree decomposition on the dual hypergraph associated with the scenario and we shown that the problem is tractable on the class of those instances whose dual hypergraphs have bounded hypertree width .For some special , yet relevant cases , a highly parallelizable algorithm is also discussed .Interestingly , it also emerged that the class of structured item graphs is properly contained in the class of instances having bounded hypertree width hence , the reason of their intractability is not their generality .In particular , the latter result is established by showing a precise relationship between structured item graphs and restricted forms of hypertree decompositions on the dual hypergraph , called query decompositions see , e.g. , 7 .In the light of this observation , we note that proving some approximability results for structured item graphs requires a deep understanding of the approximability of query decompositions , which is currently missing in the literature .As a further avenue of research , it would be relevant to enhance the algorithm ComputeSetPackingk , e.g. , by using specialized data structures , in order to avoid the quadratic dependency from | E H | + 1 k. Finally , an other interesting question is to assess whether the structural decomposition techniques discussed in the paper can be used to efficiently deal with generalizations of the winner determination problem .For instance , it might be relevant in several application scenarios to design algorithms that can find a selling strategy when several copies of the same item are available for selling , and when moreover the auctioneer is satisfied when at least a given number of copies is actually sold .", "author_keywords_stem": ["hypergraph", "combinatori auction", "hypertre decomposit"]}